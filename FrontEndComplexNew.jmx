<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables ORIGINAL" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="typeTest" elementType="Argument">
            <stringProp name="Argument.name">typeTest</stringProp>
            <stringProp name="Argument.value">${__P(typeTest,performance)}</stringProp>
            <stringProp name="Argument.desc">performance,load,stress,spike,endurance this are the type available</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dashboardTab" elementType="Argument">
            <stringProp name="Argument.name">dashboardTab</stringProp>
            <stringProp name="Argument.value">${__P(dashboardTab,true)}</stringProp>
            <stringProp name="Argument.desc">true or false to enable the specific test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetTab" elementType="Argument">
            <stringProp name="Argument.name">targetTab</stringProp>
            <stringProp name="Argument.value">${__P(targetTab,false)}</stringProp>
            <stringProp name="Argument.desc">true or false to enable the specific test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="paymentTab" elementType="Argument">
            <stringProp name="Argument.name">paymentTab</stringProp>
            <stringProp name="Argument.value">${__P(paymentTab,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="profileTab" elementType="Argument">
            <stringProp name="Argument.name">profileTab</stringProp>
            <stringProp name="Argument.value">${__P(profileTab,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL,token.preprod.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL,test.preprod.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="counter" elementType="Argument">
            <stringProp name="Argument.name">counter</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentDate" elementType="Argument">
            <stringProp name="Argument.name">currentDate</stringProp>
            <stringProp name="Argument.value">${__time(YYYY-MM-dd,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="renewSessionTime" elementType="Argument">
            <stringProp name="Argument.name">renewSessionTime</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="bookingsPerHour" elementType="Argument">
            <stringProp name="Argument.name">bookingsPerHour</stringProp>
            <stringProp name="Argument.value">${__P(bookingsPerHour,4000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="territory" elementType="Argument">
            <stringProp name="Argument.name">territory</stringProp>
            <stringProp name="Argument.value">${__P(territory,CA\,US)}</stringProp>
            <stringProp name="Argument.desc">when has &quot;,&quot; it has to put  a &quot;\&quot; the original should be CA,US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables Variable changed" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="typeTest" elementType="Argument">
            <stringProp name="Argument.name">typeTest</stringProp>
            <stringProp name="Argument.value">${__P(typeTest,performance)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">performance,load,stress,spike,endurance this are the type available</stringProp>
          </elementProp>
          <elementProp name="businesFlowA" elementType="Argument">
            <stringProp name="Argument.name">businesFlowA</stringProp>
            <stringProp name="Argument.value">${__P(businesFlowA,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">true or false to enable the specific test section</stringProp>
          </elementProp>
          <elementProp name="businesFlowB" elementType="Argument">
            <stringProp name="Argument.name">businesFlowB</stringProp>
            <stringProp name="Argument.value">${__P(businesFlowB,true)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">true or false to enable the specific test section</stringProp>
          </elementProp>
          <elementProp name="businesFlowC" elementType="Argument">
            <stringProp name="Argument.name">businesFlowC</stringProp>
            <stringProp name="Argument.value">${__P(businesFlowC,false)}</stringProp>
            <stringProp name="Argument.desc">true or false to enable the specific test section</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="businesFlowD" elementType="Argument">
            <stringProp name="Argument.name">businesFlowD</stringProp>
            <stringProp name="Argument.value">${__P(businesFlowD,false)}</stringProp>
            <stringProp name="Argument.desc">true or false to enable the specific test section</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL,token.preprod.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL,test.preprod.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="counter" elementType="Argument">
            <stringProp name="Argument.name">counter</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentDate" elementType="Argument">
            <stringProp name="Argument.name">currentDate</stringProp>
            <stringProp name="Argument.value">${__time(YYYY-MM-dd,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="renewSessionTime" elementType="Argument">
            <stringProp name="Argument.name">renewSessionTime</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SLATargetPerHour" elementType="Argument">
            <stringProp name="Argument.name">SLATargetPerHour</stringProp>
            <stringProp name="Argument.value">${__P(SLATargetPerHour,4000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="territory" elementType="Argument">
            <stringProp name="Argument.name">territory</stringProp>
            <stringProp name="Argument.value">${__P(territory,CA\,US)}</stringProp>
            <stringProp name="Argument.desc">when has &quot;,&quot; it has to put  a &quot;\&quot; the original should be CA,US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables TESTE">
        <collectionProp name="Arguments.arguments">
          <elementProp name="typeTest" elementType="Argument">
            <stringProp name="Argument.name">typeTest</stringProp>
            <stringProp name="Argument.value">${__P(typeTest,performance)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">performance,load,stress,spike,endurance this are the type available</stringProp>
          </elementProp>
          <elementProp name="SLATargetPerHour" elementType="Argument">
            <stringProp name="Argument.name">SLATargetPerHour</stringProp>
            <stringProp name="Argument.value">${__P(SLATargetPerHour,4000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="disableTransactions" elementType="Argument">
            <stringProp name="Argument.name">disableTransactions</stringProp>
            <stringProp name="Argument.value">${__P(disableTransactions,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">place the transaction number you want to disble separated by &quot;;&quot; Ex.: 2;3;4</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL,token.preprod.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">${__P(BASE_URL,test.preprod.net)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="counter" elementType="Argument">
            <stringProp name="Argument.name">counter</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="currentDate" elementType="Argument">
            <stringProp name="Argument.name">currentDate</stringProp>
            <stringProp name="Argument.value">${__time(YYYY-MM-dd,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="territory" elementType="Argument">
            <stringProp name="Argument.name">territory</stringProp>
            <stringProp name="Argument.value">${__P(territory,CA\,US)}</stringProp>
            <stringProp name="Argument.desc">when has &quot;,&quot; it has to put  a &quot;\&quot; the original should be CA,US</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="renewSessionTime" elementType="Argument">
            <stringProp name="Argument.name">renewSessionTime</stringProp>
            <stringProp name="Argument.value">300</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
        <collectionProp name="HeaderManager.headers"/>
      </HeaderManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">true</boolProp>
      </CacheManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <stringProp name="HTTPSampler.port">443</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <collectionProp name="DNSCacheManager.hosts"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <com.blazemeter.jmeter.RandomCSVDataSetConfig guiclass="com.blazemeter.jmeter.RandomCSVDataSetConfigGui" testclass="com.blazemeter.jmeter.RandomCSVDataSetConfig" testname="bzm - Random CSV Data Set Config" enabled="false">
        <stringProp name="filename">variables/users.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="variableNames">username,password</stringProp>
        <boolProp name="randomOrder">true</boolProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="rewindOnTheEndOfList">true</boolProp>
        <boolProp name="independentListPerThread">false</boolProp>
      </com.blazemeter.jmeter.RandomCSVDataSetConfig>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="0. Authentication" enabled="false"/>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="0. Authentication Transaction" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="0. Authentication Transaction" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 GET - Login" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers"/>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.2 POST - Login" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers"/>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - set timestamp" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">long currentTime = System.currentTimeMillis();
// Set the rpevious timestamp as a property
props.put(&quot;previousTimeStamp&quot;, String.valueOf(currentTime));</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="TestPlan.comments">this has to be in the last token request to set first timestamp</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="0. Renew Session Transaction" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler -Set Timestamp" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">Integer renewSessionTime = Integer.parseInt(vars.get(&quot;renewSessionTime&quot;)) * 1000 // seconds to milliseconds

//Retrieve the current timestamp
long currentTime = System.currentTimeMillis()
// Check if the previous timestamp property exists
if (props.get(&quot;previousTimeStamp&quot;) != null) {

	long previousTime = Long.parseLong(props.get(&quot;previousTimeStamp&quot;)) // Parse the previous timestamp from the property

	long difference = currentTime - previousTime // Calculate the difference in milliseconds

	//Check if the difference is greater than renewSessionTime
	if (difference &gt; renewSessionTime) {
		vars.put(&quot;renew&quot;, &quot;true&quot;)
		// Update the previous timestamp to the current timestamp for future comparisons
		props.put(&quot;previousTimeStamp&quot;, String.valueOf(currentTime))
	} else {
		vars.put(&quot;renew&quot;, &quot;false&quot;)
	}
} else {
	// If previous timestamp does not exist, set renew flag to false
	vars.put(&quot;renew&quot;, &quot;false&quot;)
}
SampleResult.setIgnore();</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - validate the timer to renew token" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;renew&quot;) == &quot;true&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.3 POST - Renew token" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers"/>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="1.ComplexFrontEnd" enabled="false"/>
      <hashTree>
        <com.blazemeter.jmeter.control.WeightedSwitchController guiclass="com.blazemeter.jmeter.control.WeightedSwitchControllerGui" testclass="com.blazemeter.jmeter.control.WeightedSwitchController" testname="1.ComplexFrontEnd">
          <boolProp name="IsRandomChoice">true</boolProp>
          <collectionProp name="Weights">
            <collectionProp name="-289049027">
              <stringProp name="-5458891">1. Search products flow</stringProp>
              <stringProp name="1683806021">${__P(1transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="550690782">
              <stringProp name="1795234965">2. Sales Discount Flow</stringProp>
              <stringProp name="-354250268">${__P(2transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="1088302018">
              <stringProp name="131931128">3. Filters flow</stringProp>
              <stringProp name="1902660739">${__P(3transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="-2127280718">
              <stringProp name="-382206873">4. Finish Order Flow</stringProp>
              <stringProp name="-135395550">${__P(4transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="1325701867">
              <stringProp name="-1698343329">5. Cancel Order flow</stringProp>
              <stringProp name="2121515457">${__P(5transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="227876783">
              <stringProp name="1843349154">6. Change Adress order flow</stringProp>
              <stringProp name="83459168">${__P(6transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="204383488">
              <stringProp name="2020800178">7. Edit Profile Flow</stringProp>
              <stringProp name="-1954597121">${__P(7transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="-1782449600">
              <stringProp name="-1866357135">8. View CheckOut Summary flow</stringProp>
              <stringProp name="302313886">${__P(8transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="-1392307971">
              <stringProp name="1565151981">9. Show My Orders flow</stringProp>
              <stringProp name="-1735742403">${__P(9transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="609892797">
              <stringProp name="-1137939639">10. Sorting function flow</stringProp>
              <stringProp name="-1142261671">${__P(10transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="-241915093">
              <stringProp name="-2047382858">11. Labeling function flow</stringProp>
              <stringProp name="1114649336">${__P(11transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="-2088715044">
              <stringProp name="1305820966">12. Erasing function flow</stringProp>
              <stringProp name="-923406953">${__P(12transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="1162236423">
              <stringProp name="-1020580464">13. Updating function flow</stringProp>
              <stringProp name="1333504054">${__P(13transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="-1249541928">
              <stringProp name="-1212094688">14. Printing function flow</stringProp>
              <stringProp name="-704552235">${__P(14transaction_weight,)}</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
          </collectionProp>
        </com.blazemeter.jmeter.control.WeightedSwitchController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - territories" enabled="false">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="filename">variables/territories.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">territoryId</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - breaks" enabled="false">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="filename">variables/breaks.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">producftId,productName</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config - venues" enabled="false">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="filename">variables/venues.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">venueId,venueName,salesTerritory</stringProp>
          </CSVDataSet>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1. Search products flow" enabled="true">
            <stringProp name="TestPlan.comments">each tab has specific business flows</stringProp>
          </GenericController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1. Search products flow Transaction" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.1 GET api/products" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.2 GET api/products" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.3 POST api/products" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.4 DELETE api/products" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.5 GET api/products" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.6 GET api/products" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.7 Post api/products" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.8 PUT api/products" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">3</stringProp>
                <stringProp name="TestPlan.comments">proportion of this request when user goes to this flow</stringProp>
              </LoopController>
              <hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.9 POST api/products" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2. Sales Discount Flow" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.  Sales Discount flow Transaction" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.1 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.2 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.3 POST api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.4 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.5 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.6 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.7 Post api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.8 PUT api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.9 DELETE api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.10 PUT api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.11 PUT api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.12 PUT api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="3. Filters flow Transaction">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller">
                <intProp name="InterleaveControl.style">1</intProp>
              </RandomController>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Area"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.1 GET api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Contract" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.2 GET api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Categories" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.3 POST api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Zones" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.4 GET api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.5 GET api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Format" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.6 GET api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.7 Post api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.8 PUT api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Payment Schedule" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.9 DELETE api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.10 PUT api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Keyword" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.11 PUT api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Status" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.12 PUT api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Contry" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.13 PUT api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - User" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.14 PUT api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Contact" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.15 PUT api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Size" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.16 PUT api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3. Filters flow Transaction - Type" enabled="true"/>
                <hashTree>
                  <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3.17 PUT api/sales" enabled="true">
                    <boolProp name="WAITING">true</boolProp>
                    <boolProp name="SUCCESFULL">true</boolProp>
                    <stringProp name="RESPONSE_CODE">200</stringProp>
                    <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                    <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                    <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                    <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                    <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                    <stringProp name="URL"></stringProp>
                    <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                  </kg.apc.jmeter.samplers.DummySampler>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers"/>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="4. Finish Order Flow" enabled="true"/>
          <hashTree>
            <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
              <intProp name="InterleaveControl.style">1</intProp>
              <stringProp name="TestPlan.comments">o peso foi obtido pela media de quantidade de endpoints entre os 2 controladores</stringProp>
            </RandomController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="4.  Finish Order flow Transaction" enabled="true">
                <stringProp name="TestPlan.comments">with Coupon</stringProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.1 GET api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.2 GET api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.3 POST api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.4 GET api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="4.  Finish Order flow Transaction" enabled="true">
                <stringProp name="TestPlan.comments">without Coupon</stringProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.5 GET api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.6 GET api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.7 Post api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.8 PUT api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.9 DELETE api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.10 PUT api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.11 PUT api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.12 PUT api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.13 PUT api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.14 PUT api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4.15 PUT api/sales" enabled="true">
                  <boolProp name="WAITING">true</boolProp>
                  <boolProp name="SUCCESFULL">true</boolProp>
                  <stringProp name="RESPONSE_CODE">200</stringProp>
                  <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                  <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                  <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                  <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                  <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                  <stringProp name="URL"></stringProp>
                  <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
                </kg.apc.jmeter.samplers.DummySampler>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers"/>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="5. Cancel Order flow" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="5. Cancel Order flow Transaction" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="5.1 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="5.2 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="6. Change Adress order flow" enabled="true">
            <stringProp name="TestPlan.comments">the weight was the summ of the 9 requests pecause one flow depend of the other to work</stringProp>
          </GenericController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6. Change Adress order flow Transaction" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="6.1 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="6.2 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="6.3 POST api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="6.4 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="6.5 POST api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="7. Edit Profile Flow" enabled="true">
            <stringProp name="TestPlan.comments">the weight was the summ of the 9 requests pecause one flow depend of the other to work</stringProp>
          </GenericController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="7. Edit Profile Flow Transaction" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="7.1 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="7.2 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="7.3 Post api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="7.4 PUT api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="8. View CheckOut Summary flow" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="8. View CheckOut Summary flow Transaction" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="8.1 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="8.2 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="8.3 POST api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="9. Show My Orders flow" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="9. Show My Orders flow Transaction" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="9.1 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="9.2 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="9.3 POST api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="10. Sorting function flow"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="10. Sorting function flow Transaction">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="10.1 GET api/sales" enabled="true">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="11. Labeling function flow"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="11. Labeling function flow Transaction">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="11.1 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="11.2 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="11.3 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="11.4 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="12. Erasing function flow"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="12. Erasing function flow Transaction">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="12.1 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="12.2 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="13. Updating function flow"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="13. Updating function flow Transaction">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="13.1 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="13.2 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="13.3 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="13.4 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="13.5 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="13.6 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="13.7 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="14. Printing function flow"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="14. Printing function flow Transaction">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="14.1 GET api/sales">
                <boolProp name="WAITING">true</boolProp>
                <boolProp name="SUCCESFULL">true</boolProp>
                <stringProp name="RESPONSE_CODE">200</stringProp>
                <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
                <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
                <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
                <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
                <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
                <stringProp name="URL"></stringProp>
                <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              </kg.apc.jmeter.samplers.DummySampler>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers"/>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup variables to control weight and RPS Original 1" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">//props.entrySet().clear()

//Get user-defined variables
def dashboardTab = vars.get(&quot;dashboardTab&quot;)
def targetTab = vars.get(&quot;targetTab&quot;)
def maxSteps = 40 // same as total number of steps set in Troughput Shaping Timer

// Here we set the weight of each transaction flow accordingly with business numbers
def weightMappings = [
	&apos;1dashboardTab_weight&apos;:  100,
	&apos;2targetTab_weight&apos;:	100,
	&apos;3targetTab_weight&apos;:	30,
	&apos;4targetTab_weight&apos;:	100,
	&apos;5targetTab_weight&apos;:	10,
	&apos;6targetTab_weight&apos;:	10,
	&apos;7targetTab_weight&apos;:	10,
	&apos;8targetTab_weight&apos;:	30,
	&apos;9targetTab_weight&apos;:	10,
	&apos;10targetTab_weight&apos;:	30
]

// Here we set the amount of endpoints will be requested after a complete transaction
def requestMappings = [
	&apos;1dashboardTab_weight&apos;:	11,
	&apos;2targetTab_weight&apos;:	12,
	&apos;3targetTab_weight&apos;:	1.3,
	&apos;4targetTab_weight&apos;:	8,
	&apos;5targetTab_weight&apos;:	2,
	&apos;6targetTab_weight&apos;:	5,
	&apos;7targetTab_weight&apos;:	4,
	&apos;8targetTab_weight&apos;:	3,
	&apos;9targetTab_weight&apos;:	3,
	&apos;10targetTab_weight&apos;:	1	
]

def weightRequest = 0
def weightSum = 0

//Set the variables dinamically
weightMappings.each { key, value -&gt;
	// Update or se the property in Jmeter context
	weightRequest += value * requestMappings[key]
	weightSum += value
	// log.info(&quot;request {} sum {}&quot;,weightRequest, weightSum)
}

// If the target is disable, just set this variable to 1 so it doesnt change the final value, otherwise we should aim for proportional rps for dashboard based on its weigh among the overall average
def dashboardWeight = targetTab?.equalsIgnoreCase(&quot;false&quot;) ? weightMappings [&apos;1dashboardTab_weight&apos;] * requestMappings [&apos;1dashboardTab_weight&apos;] / weightRequest : 1
def bookingWeight = weightMappings [&apos;4targetTab_weight&apos;] * requestMappings [&apos;4targetTab_weight&apos;] //

def bookingToOverall = weightRequest / bookingWeight

// Expected num of bookings per hour
def bookingsPerHour = Integer.parseInt(vars.get(&quot;bookingsPerHour&quot;))

def normalLoad = (((bookingsPerHour/3600) * weightRequest / weightSum) * bookingToOverall * dashboardWeight) * 1.1

log.info(&quot;normalLoad: {}&quot;, normalLoad)
log.info(&quot;dashboardWeight: {}&quot;, dashboardWeight)
log.info(&quot;bookingsPerHour: {}&quot;, bookingsPerHour)
log.info(&quot;weightRequest: {}&quot;, weightRequest)
log.info(&quot;weightSum: {}&quot;, weightSum)
log.info(&quot;requestMappings[&apos;4targetTab_weight&apos;]: {}&quot;, requestMappings[&apos;4targetTab_weight&apos;])
log.info(&quot;weightMappings: {}&quot;, weightMappings)

def profile
def duration
def typeTest = vars.get(&quot;typeTest&quot;)

// 4000/3600 * 3390 / 420 * 8 = 71.74
// def normalLoad = ((bookingsPerHour/3600) * weightRequest / weightSum) * requestMappings[&apos;4targetTab_weight&apos;] * dashboardWeight

switch (typeTest) {
	case &quot;performance&quot;:
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/ numOfRamps

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad,		rampUp],
			[normalLoad,   	normalLoad,		stepDuration]
		  ]
		break

	case &quot;load&quot;:
		def numOfRamps = 4
		def rampUp = 60
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration/numOfRamps - rampUp)

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 0.25,	rampUp],
			[normalLoad * 0.25,	normalLoad * 0.25,	stepDuration],
			[normalLoad * 0.25,	normalLoad * 0.5,	rampUp],
			[normalLoad * 0.5,	normalLoad * 0.5,	stepDuration],
			[normalLoad * 0.5,	normalLoad * 0.75,  rampUp],
			[normalLoad * 0.75,	normalLoad * 0.75,	stepDuration],
			[normalLoad * 0.75,	normalLoad * 1,	rampUp],
			[normalLoad * 1,	normalLoad * 1,	stepDuration]
		  ]
		break

	case &quot;stress&quot;:
		def numOfRamps = 20
		def rampUp = 60		
		def stepDuration = 180
		duration = 60 * 60 * 1.5 // last step duration
		def finalDuration = 60 * 13

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 2,  	rampUp],
			[normalLoad * 2,	normalLoad * 2,  	stepDuration],
			[normalLoad * 2,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 4,  	rampUp],
			[normalLoad * 4,	normalLoad * 4,  	stepDuration],
			[normalLoad * 4,	normalLoad * 5,  	rampUp],
			[normalLoad * 5,	normalLoad * 5,  	stepDuration],
			[normalLoad * 5,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[normalLoad * 6,	normalLoad * 7,  	rampUp],
			[normalLoad * 7,	normalLoad * 7,  	stepDuration],
			[normalLoad * 7,	normalLoad * 8,  	rampUp],
			[normalLoad * 8,	normalLoad * 8,  	stepDuration],
			[normalLoad * 8,	normalLoad * 9,  	rampUp],
			[normalLoad * 9,	normalLoad * 9,  	stepDuration],
			[normalLoad * 9,	normalLoad * 10,  	rampUp],
			[normalLoad * 10,	normalLoad * 10,  	stepDuration],
			[normalLoad * 10,	normalLoad * 11,  	rampUp],
			[normalLoad * 11,	normalLoad * 11,  	stepDuration],
			[normalLoad * 11,	normalLoad * 12,  	rampUp],
			[normalLoad * 12,	normalLoad * 12,  	stepDuration],
			[normalLoad * 12,	normalLoad * 13,  	rampUp],
			[normalLoad * 13,	normalLoad * 13,  	stepDuration],
			[normalLoad * 13,	normalLoad * 14,  	rampUp],
			[normalLoad * 14,	normalLoad * 14,  	stepDuration],
			[normalLoad * 14,	normalLoad * 15,  	rampUp],
			[normalLoad * 15,	normalLoad * 15,  	stepDuration],
			[normalLoad * 15,	normalLoad * 16,  	rampUp],
			[normalLoad * 16,	normalLoad * 16,  	stepDuration],
			[normalLoad * 16,	normalLoad * 17,  	rampUp],
			[normalLoad * 17,	normalLoad * 17,  	stepDuration],
			[normalLoad * 17,	normalLoad * 18,  	rampUp],
			[normalLoad * 18,	normalLoad * 18,  	stepDuration],
			[normalLoad * 18,	normalLoad * 19,  	rampUp],
			[normalLoad * 19,	normalLoad * 19,  	stepDuration],
			[normalLoad * 19,	normalLoad * 20,  	rampUp],
			[normalLoad * 20,	normalLoad * 20,  	finalDuration]
		  ]
		break

	case &quot;spike&quot;:
		def numOfRamps = 4
		def rampUp = 60 //sec
		duration = 60 * 60 * 1.5 // sec * min * hour
		def postMonitoringDuration = 60 * 30 //sec * min
		def stepDuration = Math.round((duration - postMonitoringDuration)/numOfRamps - rampUp)
		  // 5 minutes or whatever you intend

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[1,				1,				postMonitoringDuration]
		  ]
		break

	case &quot;endurance&quot;:
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 8 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/numOfRamps

		profile = [
			//start_rps			end_rps				duration
			[1,					normalLoad * 1,	  	rampUp],
			[normalLoad * 1,		normalLoad * 1,	  	stepDuration]
		  ]
		break
}

def nLines = profile.size()

for (int i=0; i&lt; nLines ; i++){
	props.put(&quot;start_rps&quot; + String.valueOf(i+1), String.valueOf(profile[i][0]))
	props.put(&quot;end_rps&quot;   + String.valueOf(i+1), String.valueOf(profile[i][1]))
	props.put(&quot;duration&quot;  + String.valueOf(i+1), String.valueOf(profile[i][2]))

	log.info(&quot;start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}&quot;,
	String.valueOf(i+1), String.valueOf(profile[i][0]),
	String.valueOf(i+1), String.valueOf(profile[i][1]),
	String.valueOf(i+1), String.valueOf(profile[i][2])
	)
}

for (int i=nLines; i&lt; maxSteps ; i++){
	props.put(&quot;start_rps&quot; + String.valueOf(i+1), &quot;0&quot;)
	props.put(&quot;end_rps&quot;   + String.valueOf(i+1), &quot;0&quot;)
	props.put(&quot;duration&quot;  + String.valueOf(i+1), &quot;0&quot;)

	log.info(&quot;start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}&quot;,
	String.valueOf(i+1), props.get(&quot;start_rps&quot; + String.valueOf(i+1)),
	String.valueOf(i+1), props.get(&quot;end_rps&quot; + String.valueOf(i+1)),
	String.valueOf(i+1), props.get(&quot;duration&quot; + String.valueOf(i+1))
	)
}
props.put(&quot;total_test_duration&quot;,String.valueOf(Math.round(duration)))	

// Set the variables dinamicaly
weightMappings.each { key, value -&gt;
	if(key.equals(&apos;1dashboardTab_weight&apos;)){
		value = dashboardTab.equalsIgnoreCase(&quot;true&quot;) ? value : 0
	}
	else{
		value = targetTab.equalsIgnoreCase(&quot;true&quot;) ? value : 0
	}
	props.setProperty(key, value.toString())
}

log.info(&quot;test type: {}&quot;, typeTest)
log.info(&quot;total_test_duration: {}&quot;, props.get(&quot;total_test_duration&quot;))

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup variables to control weight and RPS Original 2" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">//props.entrySet().clear()

//Get user-defined variables
def dashboardTab = vars.get(&quot;dashboardTab&quot;)
def targetTab = vars.get(&quot;targetTab&quot;)
def maxSteps = 40 // same as total number of steps set in Troughput Shaping Timer

// Here we set the weight of each transaction flow accordingly with business numbers
def weightMappings = [
	&apos;1dashboardTab_weight&apos;:  dashboardTab?.equalsIgnoreCase(&quot;true&quot;) ? 100 : 0,
	&apos;2targetTab_weight&apos;:	100,
	&apos;3targetTab_weight&apos;:	30,
	&apos;4targetTab_weight&apos;:	100,
	&apos;5targetTab_weight&apos;:	10,
	&apos;6and7targetTab_weight&apos;:	10,
	&apos;8targetTab_weight&apos;:	30,
	&apos;9targetTab_weight&apos;:	10,
	&apos;10targetTab_weight&apos;:	30
]

// Here we set the amount of endpoints will be requested after a complete transaction
def requestMappings = [
	&apos;1dashboardTab_weight&apos;:	11,
	&apos;2targetTab_weight&apos;:	12,
	&apos;3targetTab_weight&apos;:	1.3,
	&apos;4targetTab_weight&apos;:	8,
	&apos;5targetTab_weight&apos;:	2,
	&apos;6and7targetTab_weight&apos;:	9,
	&apos;8targetTab_weight&apos;:	3,
	&apos;9targetTab_weight&apos;:	3,
	&apos;10targetTab_weight&apos;:	1	
]

def weightRequest = 0
def weightSum = 0

//Set the variables dinamically
weightMappings.each { key, value -&gt;
	// Update or se the property in Jmeter context
	weightRequest += value * requestMappings[key]
	weightSum += value
	// log.info(&quot;request {} sum {}&quot;,weightRequest, weightSum)
}

// If the target is disable, just set this variable to 1 so it doesnt change the final value, otherwise we should aim for proportional rps for dashboard based on its weigh among the overall average
def dashboardWeight = targetTab?.equalsIgnoreCase(&quot;false&quot;) ? weightMappings [&apos;1dashboardTab_weight&apos;] * requestMappings [&apos;1dashboardTab_weight&apos;] / weightRequest : 1

// Expected num of bookings per hour
def bookingsPerHour = Integer.parseInt(vars.get(&quot;bookingsPerHour&quot;))

// As we are using the booking as our target of rps, the forumula is: weightRequest(overall weight)/ (booking weight)
def bookingToOverall = weightRequest/ ( requestMappings[&apos;4targetTab_weight&apos;]* weightMappings [&apos;4targetTab_weight&apos;]) // 3390/8*100 = 4.2375

/*(bookingPerHour/3600) = base rps we are targeting for booking transaction
 * weightRequest / weightSum = weighted average
 * multiply by bookingToOverall to find the proportional overall rps
 * multiply by the dashboardWeight
 * multiplu by 1.1 for safety margin throughput
 */

def normalLoad = (((bookingsPerHour/3600) * weightRequest / weightSum) * (bookingToOverall) * dashboardWeight) * 1.1
def profile
def duration
def typeTest = vars.get(&quot;typeTest&quot;)

// 4000/3600 * 3390 / 420 * 8 = 71.74
// def normalLoad = ((bookingsPerHour/3600) * weightRequest / weightSum) * requestMappings[&apos;4targetTab_weight&apos;] * dashboardWeight

switch (typeTest) {
	case &quot;performance&quot;:
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/ numOfRamps

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad,		rampUp],
			[normalLoad,   	normalLoad,		stepDuration]
		  ]
		break

	case &quot;load&quot;:
		def numOfRamps = 4
		def rampUp = 60
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration/numOfRamps - rampUp)

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 0.25,	rampUp],
			[normalLoad * 0.25,	normalLoad * 0.25,	stepDuration],
			[normalLoad * 0.25,	normalLoad * 0.5,	rampUp],
			[normalLoad * 0.5,	normalLoad * 0.5,	stepDuration],
			[normalLoad * 0.5,	normalLoad * 0.75,  rampUp],
			[normalLoad * 0.75,	normalLoad * 0.75,	stepDuration],
			[normalLoad * 0.75,	normalLoad * 1,	rampUp],
			[normalLoad * 1,	normalLoad * 1,	stepDuration]
		  ]
		break

	case &quot;stress&quot;:
		def numOfRamps = 20
		def rampUp = 60		
		def stepDuration = 180
		duration = 60 * 60 * 1.5 // last step duration
		def finalDuration = 60 * 13

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 2,  	rampUp],
			[normalLoad * 2,	normalLoad * 2,  	stepDuration],
			[normalLoad * 2,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 4,  	rampUp],
			[normalLoad * 4,	normalLoad * 4,  	stepDuration],
			[normalLoad * 4,	normalLoad * 5,  	rampUp],
			[normalLoad * 5,	normalLoad * 5,  	stepDuration],
			[normalLoad * 5,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[normalLoad * 6,	normalLoad * 7,  	rampUp],
			[normalLoad * 7,	normalLoad * 7,  	stepDuration],
			[normalLoad * 7,	normalLoad * 8,  	rampUp],
			[normalLoad * 8,	normalLoad * 8,  	stepDuration],
			[normalLoad * 8,	normalLoad * 9,  	rampUp],
			[normalLoad * 9,	normalLoad * 9,  	stepDuration],
			[normalLoad * 9,	normalLoad * 10,  	rampUp],
			[normalLoad * 10,	normalLoad * 10,  	stepDuration],
			[normalLoad * 10,	normalLoad * 11,  	rampUp],
			[normalLoad * 11,	normalLoad * 11,  	stepDuration],
			[normalLoad * 11,	normalLoad * 12,  	rampUp],
			[normalLoad * 12,	normalLoad * 12,  	stepDuration],
			[normalLoad * 12,	normalLoad * 13,  	rampUp],
			[normalLoad * 13,	normalLoad * 13,  	stepDuration],
			[normalLoad * 13,	normalLoad * 14,  	rampUp],
			[normalLoad * 14,	normalLoad * 14,  	stepDuration],
			[normalLoad * 14,	normalLoad * 15,  	rampUp],
			[normalLoad * 15,	normalLoad * 15,  	stepDuration],
			[normalLoad * 15,	normalLoad * 16,  	rampUp],
			[normalLoad * 16,	normalLoad * 16,  	stepDuration],
			[normalLoad * 16,	normalLoad * 17,  	rampUp],
			[normalLoad * 17,	normalLoad * 17,  	stepDuration],
			[normalLoad * 17,	normalLoad * 18,  	rampUp],
			[normalLoad * 18,	normalLoad * 18,  	stepDuration],
			[normalLoad * 18,	normalLoad * 19,  	rampUp],
			[normalLoad * 19,	normalLoad * 19,  	stepDuration],
			[normalLoad * 19,	normalLoad * 20,  	rampUp],
			[normalLoad * 20,	normalLoad * 20,  	finalDuration]
		  ]
		break

	case &quot;spike&quot;:
		def numOfRamps = 4
		def rampUp = 60 //sec
		duration = 60 * 60 * 1.5 // sec * min * hour
		def postMonitoringDuration = 60 * 30 //sec * min
		def stepDuration = Math.round((duration - postMonitoringDuration)/numOfRamps - rampUp)
		  // 5 minutes or whatever you intend

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[1,				1,				postMonitoringDuration]
		  ]
		break

	case &quot;endurance&quot;:
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 8 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/numOfRamps

		profile = [
			//start_rps			end_rps				duration
			[1,					normalLoad * 1,	  	rampUp],
			[normalLoad * 1,		normalLoad * 1,	  	stepDuration]
		  ]
		break
}

def nLines = profile.size()

for (int i=0; i&lt; nLines ; i++){
	props.put(&quot;start_rps&quot; + String.valueOf(i+1), String.valueOf(profile[i][0]))
	props.put(&quot;end_rps&quot;   + String.valueOf(i+1), String.valueOf(profile[i][1]))
	props.put(&quot;duration&quot;  + String.valueOf(i+1), String.valueOf(profile[i][2]))

	log.info(&quot;start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}&quot;,
	String.valueOf(i+1), String.valueOf(profile[i][0]),
	String.valueOf(i+1), String.valueOf(profile[i][1]),
	String.valueOf(i+1), String.valueOf(profile[i][2])
	)
}

for (int i=nLines; i&lt; maxSteps ; i++){
	props.put(&quot;start_rps&quot; + String.valueOf(i+1), &quot;0&quot;)
	props.put(&quot;end_rps&quot;   + String.valueOf(i+1), &quot;0&quot;)
	props.put(&quot;duration&quot;  + String.valueOf(i+1), &quot;0&quot;)

	log.info(&quot;start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}&quot;,
	String.valueOf(i+1), props.get(&quot;start_rps&quot; + String.valueOf(i+1)),
	String.valueOf(i+1), props.get(&quot;end_rps&quot; + String.valueOf(i+1)),
	String.valueOf(i+1), props.get(&quot;duration&quot; + String.valueOf(i+1))
	)
}
props.put(&quot;total_test_duration&quot;,String.valueOf(Math.round(duration)))	

// Set the variables dinamicaly
weightMappings.each { key, value -&gt;
	if(key.equals(&apos;1dashboardTab_weight&apos;)){
		value = dashboardTab.equalsIgnoreCase(&quot;true&quot;) ? value : 0
	}
	else{
		value = targetTab.equalsIgnoreCase(&quot;true&quot;) ? value : 0
	}
	props.setProperty(key, value.toString())
}

log.info(&quot;normalLoad: {}&quot;, normalLoad)
log.info(&quot;dashboardWeight: {}&quot;, dashboardWeight)
log.info(&quot;bookingsPerHour: {}&quot;, bookingsPerHour)
log.info(&quot;weightRequest: {}&quot;, weightRequest)
log.info(&quot;weightSum: {}&quot;, weightSum)
log.info(&quot;test type: {}&quot;, typeTest)
log.info(&quot;requestMappings[&apos;4targetTab_weight&apos;]: {}&quot;, requestMappings[&apos;4targetTab_weight&apos;])
log.info(&quot;total_test_duration: {}&quot;, props.get(&quot;total_test_duration&quot;))

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup variables to control weight and RPS Original 3" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">//Get user-defined variables
def dashboardTab = vars.get(&quot;dashboardTab&quot;)
def targetTab = vars.get(&quot;targetTab&quot;)
def paymentTab = vars.get(&quot;paymentTab&quot;)
def profileTab = vars.get(&quot;profileTab&quot;)
def maxSteps = 40 // same as total number of steps set in Troughput Shaping Timer

// Here we set the weight of each transaction flow accordingly with business numbers
def weightMappings = [
	&apos;1dashboardTab_weight&apos;:  dashboardTab?.equalsIgnoreCase(&quot;true&quot;) ? 100 : 0,
	&apos;2targetTab_weight&apos;:	100,
	&apos;3targetTab_weight&apos;:	30,
	&apos;4targetTab_weight&apos;:	100,
	&apos;5targetTab_weight&apos;:	10,
	&apos;6and7targetTab_weight&apos;:	10,
	&apos;8targetTab_weight&apos;:	30,
	&apos;9targetTab_weight&apos;:	10,
	&apos;10targetTab_weight&apos;:	30,
	&apos;11paymentTab_weight&apos;:  	paymentTab?.equalsIgnoreCase(&quot;true&quot;) ? 15 : 0,
    	&apos;12paymentTab_weight&apos;:  	paymentTab?.equalsIgnoreCase(&quot;true&quot;) ? 100 : 0,
    	&apos;13profileTab_weight&apos;:  	profileTab?.equalsIgnoreCase(&quot;true&quot;) ? 15 : 0,
    	&apos;14profileTab_weight&apos;:  	profileTab?.equalsIgnoreCase(&quot;true&quot;) ? 40 : 0
]

// Here we set the amount of endpoints will be requested after a complete transaction
def requestMappings = [
	&apos;1dashboardTab_weight&apos;:	11,
	&apos;2targetTab_weight&apos;:	12,
	&apos;3targetTab_weight&apos;:	1.3,
	&apos;4targetTab_weight&apos;:	8,
	&apos;5targetTab_weight&apos;:	2,
	&apos;6and7targetTab_weight&apos;:	9,
	&apos;8targetTab_weight&apos;:	3,
	&apos;9targetTab_weight&apos;:	3,
	&apos;10targetTab_weight&apos;:	1,
	&apos;11paymentTab_weight&apos;:	4,
	&apos;12paymentTab_weight&apos;:	2,
	&apos;13profileTab_weight&apos;:	7,
	&apos;14profileTab_weight&apos;:	1
]

def weightRequest = 0
def weightSum = 0

//Set the variables dinamically
weightMappings.each { key, value -&gt;
	// Update or se the property in Jmeter context
	weightRequest += value * requestMappings[key]
	weightSum += value
	// log.info(&quot;request {} sum {}&quot;,weightRequest, weightSum)
}

// If the target is disable, just set this variable to 1 so it doesnt change the final value, otherwise we should aim for proportional rps for dashboard based on its weigh among the overall average
def dashboardWeight = targetTab?.equalsIgnoreCase(&quot;false&quot;) ? weightMappings [&apos;1dashboardTab_weight&apos;] * requestMappings [&apos;1dashboardTab_weight&apos;] / weightRequest : 1
def paymentTabWeight = targetTab?.equalsIgnoreCase(&quot;false&quot;) ? weightMappings [&apos;1dashboardTab_weight&apos;] * requestMappings [&apos;1dashboardTab_weight&apos;] / weightRequest : 1
def profileTabWeight = targetTab?.equalsIgnoreCase(&quot;false&quot;) ? weightMappings [&apos;1dashboardTab_weight&apos;] * requestMappings [&apos;1dashboardTab_weight&apos;] / weightRequest : 1
def bookingWeight = weightMappings [&apos;4targetTab_weight&apos;] * requestMappings [&apos;4targetTab_weight&apos;] //

def bookingToOverall = weightRequest / bookingWeight

// Expected num of bookings per hour
def bookingsPerHour = Integer.parseInt(vars.get(&quot;bookingsPerHour&quot;))

def normalLoad = (((bookingsPerHour/3600) * weightRequest / weightSum) * bookingToOverall * dashboardWeight) * 1.1

log.info(&quot;normalLoad: {}&quot;, normalLoad)
log.info(&quot;bookingsPerHour: {}&quot;, bookingsPerHour)
log.info(&quot;weightRequest: {}&quot;, weightRequest)
log.info(&quot;weightSum: {}&quot;, weightSum)
log.info(&quot;requestMappings[&apos;4targetTab_weight&apos;]: {}&quot;, requestMappings[&apos;4targetTab_weight&apos;])</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup variables to control weight and RPSORIGINAL 1" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">//props.entrySet().clear()

//Get user-defined variables
def businesFlowA = vars.get(&quot;businesFlowA&quot;)
def businesFlowB = vars.get(&quot;businesFlowB&quot;)
def businesFlowA = vars.get(&quot;businesFlowC&quot;)
def businesFlowB = vars.get(&quot;businesFlowD&quot;)
def maxSteps = 40 // same as total number of steps set in Troughput Shaping Timer

// Here we set the weight of each transaction flow accordingly with business numbers
def weightMappings = [
	&apos;1businesFlowA_weight&apos;:  businesFlowA?.equalsIgnoreCase(&quot;true&quot;) ? 100 : 0,
	&apos;2businesFlowB_weight&apos;:	100,
	&apos;3businesFlowB_weight&apos;:	30,
	&apos;4businesFlowB_weight&apos;:	100,
	&apos;5businesFlowB_weight&apos;:	10,
     &apos;6businesFlowB_weight&apos;:	10,
	&apos;7businesFlowB_weight&apos;:	10,
	&apos;8businesFlowB_weight&apos;:	30,
	&apos;9businesFlowB_weight&apos;:	10,
	&apos;10businesFlowB_weight&apos;:	30,
	&apos;11businesFlowB_weight&apos;:	10,
	&apos;12businesFlowB_weight&apos;:	30,
	&apos;13businesFlowB_weight&apos;:	10,
	&apos;14businesFlowB_weight&apos;:	30
]

// Here we set the amount of endpoints will be requested after a complete transaction
def requestMappings = [
	&apos;1businesFlowA_weight&apos;:	11,
	&apos;2businesFlowB_weight&apos;:	12,
	&apos;3businesFlowB_weight&apos;:	1.3,
	&apos;4businesFlowB_weight&apos;:	8,
	&apos;5businesFlowB_weight&apos;:	2,
	&apos;6businesFlowB_weight&apos;:	5,
     &apos;7businesFlowB_weight&apos;:	4,
	&apos;8businesFlowB_weight&apos;:	3,
	&apos;9businesFlowB_weight&apos;:	3,
	&apos;10businesFlowB_weight&apos;:	1	
]

def weightRequest = 0
def weightSum = 0

//Set the variables dinamically
weightMappings.each { key, value -&gt;
	// Update or se the property in Jmeter context
	weightRequest += value * requestMappings[key]
	weightSum += value
	// log.info(&quot;request {} sum {}&quot;,weightRequest, weightSum)
}

// If the target is disable, just set this variable to 1 so it doesnt change the final value, otherwise we should aim for proportional rps for businesFlowA based on its weigh among the overall average
def businesFlowAWeight = businesFlowB?.equalsIgnoreCase(&quot;false&quot;) ? weightMappings [&apos;1businesFlowA_weight&apos;] * requestMappings [&apos;1businesFlowA_weight&apos;] / weightRequest : 1

// Expected num of bookings per hour
def SLATargetPerHour = Integer.parseInt(vars.get(&quot;SLATargetPerHour&quot;))

// As we are using the booking as our target of rps, the forumula is: weightRequest(overall weight)/ (booking weight)
def bookingToOverall = weightRequest/ ( requestMappings[&apos;4businesFlowB_weight&apos;]* weightMappings [&apos;4businesFlowB_weight&apos;]) // 3390/8*100 = 4.2375

/*(SLATargetPerHour/3600) = base rps we are targeting for booking transaction
 * weightRequest / weightSum = weighted average
 * multiply by bookingToOverall to find the proportional overall rps
 * multiply by the businesFlowAWeight
 * multiplu by 1.1 for safety margin throughput
 */

def normalLoad = (((SLATargetPerHour/3600) * weightRequest / weightSum) * (bookingToOverall) * businesFlowAWeight) * 1.1
def profile
def duration
def typeTest = vars.get(&quot;typeTest&quot;)

// 4000/3600 * 3390 / 420 * 8 = 71.74
// def normalLoad = ((SLATargetPerHour/3600) * weightRequest / weightSum) * requestMappings[&apos;4businesFlowB_weight&apos;] * businesFlowAWeight

switch (typeTest) {
	case &quot;performance&quot;:
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/ numOfRamps

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad,		rampUp],
			[normalLoad,   	normalLoad,		stepDuration]
		  ]
		break

	case &quot;load&quot;:
		def numOfRamps = 4
		def rampUp = 60
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration/numOfRamps - rampUp)

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 0.25,	rampUp],
			[normalLoad * 0.25,	normalLoad * 0.25,	stepDuration],
			[normalLoad * 0.25,	normalLoad * 0.5,	rampUp],
			[normalLoad * 0.5,	normalLoad * 0.5,	stepDuration],
			[normalLoad * 0.5,	normalLoad * 0.75,  rampUp],
			[normalLoad * 0.75,	normalLoad * 0.75,	stepDuration],
			[normalLoad * 0.75,	normalLoad * 1,	rampUp],
			[normalLoad * 1,	normalLoad * 1,	stepDuration]
		  ]
		break

	case &quot;stress&quot;:
		def numOfRamps = 20
		def rampUp = 60		
		def stepDuration = 180
		duration = 60 * 60 * 1.5 // last step duration
		def finalDuration = 60 * 13

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 2,  	rampUp],
			[normalLoad * 2,	normalLoad * 2,  	stepDuration],
			[normalLoad * 2,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 4,  	rampUp],
			[normalLoad * 4,	normalLoad * 4,  	stepDuration],
			[normalLoad * 4,	normalLoad * 5,  	rampUp],
			[normalLoad * 5,	normalLoad * 5,  	stepDuration],
			[normalLoad * 5,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[normalLoad * 6,	normalLoad * 7,  	rampUp],
			[normalLoad * 7,	normalLoad * 7,  	stepDuration],
			[normalLoad * 7,	normalLoad * 8,  	rampUp],
			[normalLoad * 8,	normalLoad * 8,  	stepDuration],
			[normalLoad * 8,	normalLoad * 9,  	rampUp],
			[normalLoad * 9,	normalLoad * 9,  	stepDuration],
			[normalLoad * 9,	normalLoad * 10,  	rampUp],
			[normalLoad * 10,	normalLoad * 10,  	stepDuration],
			[normalLoad * 10,	normalLoad * 11,  	rampUp],
			[normalLoad * 11,	normalLoad * 11,  	stepDuration],
			[normalLoad * 11,	normalLoad * 12,  	rampUp],
			[normalLoad * 12,	normalLoad * 12,  	stepDuration],
			[normalLoad * 12,	normalLoad * 13,  	rampUp],
			[normalLoad * 13,	normalLoad * 13,  	stepDuration],
			[normalLoad * 13,	normalLoad * 14,  	rampUp],
			[normalLoad * 14,	normalLoad * 14,  	stepDuration],
			[normalLoad * 14,	normalLoad * 15,  	rampUp],
			[normalLoad * 15,	normalLoad * 15,  	stepDuration],
			[normalLoad * 15,	normalLoad * 16,  	rampUp],
			[normalLoad * 16,	normalLoad * 16,  	stepDuration],
			[normalLoad * 16,	normalLoad * 17,  	rampUp],
			[normalLoad * 17,	normalLoad * 17,  	stepDuration],
			[normalLoad * 17,	normalLoad * 18,  	rampUp],
			[normalLoad * 18,	normalLoad * 18,  	stepDuration],
			[normalLoad * 18,	normalLoad * 19,  	rampUp],
			[normalLoad * 19,	normalLoad * 19,  	stepDuration],
			[normalLoad * 19,	normalLoad * 20,  	rampUp],
			[normalLoad * 20,	normalLoad * 20,  	finalDuration]
		  ]
		break

	case &quot;spike&quot;:
		def numOfRamps = 4
		def rampUp = 60 //sec
		duration = 60 * 60 * 1.5 // sec * min * hour
		def postMonitoringDuration = 60 * 30 //sec * min
		def stepDuration = Math.round((duration - postMonitoringDuration)/numOfRamps - rampUp)
		  // 5 minutes or whatever you intend

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[1,				1,				postMonitoringDuration]
		  ]
		break

	case &quot;endurance&quot;:
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 8 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/numOfRamps

		profile = [
			//start_rps			end_rps				duration
			[1,					normalLoad * 1,	  	rampUp],
			[normalLoad * 1,		normalLoad * 1,	  	stepDuration]
		  ]
		break
}

def nLines = profile.size()

for (int i=0; i&lt; nLines ; i++){
	props.put(&quot;start_rps&quot; + String.valueOf(i+1), String.valueOf(profile[i][0]))
	props.put(&quot;end_rps&quot;   + String.valueOf(i+1), String.valueOf(profile[i][1]))
	props.put(&quot;duration&quot;  + String.valueOf(i+1), String.valueOf(profile[i][2]))

	log.info(&quot;start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}&quot;,
	String.valueOf(i+1), String.valueOf(profile[i][0]),
	String.valueOf(i+1), String.valueOf(profile[i][1]),
	String.valueOf(i+1), String.valueOf(profile[i][2])
	)
}

for (int i=nLines; i&lt; maxSteps ; i++){
	props.put(&quot;start_rps&quot; + String.valueOf(i+1), &quot;0&quot;)
	props.put(&quot;end_rps&quot;   + String.valueOf(i+1), &quot;0&quot;)
	props.put(&quot;duration&quot;  + String.valueOf(i+1), &quot;0&quot;)

	log.info(&quot;start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}&quot;,
	String.valueOf(i+1), props.get(&quot;start_rps&quot; + String.valueOf(i+1)),
	String.valueOf(i+1), props.get(&quot;end_rps&quot; + String.valueOf(i+1)),
	String.valueOf(i+1), props.get(&quot;duration&quot; + String.valueOf(i+1))
	)
}
props.put(&quot;total_test_duration&quot;,String.valueOf(Math.round(duration)))	

// Set the variables dinamicaly
weightMappings.each { key, value -&gt;
	if(key.equals(&apos;1businesFlowA_weight&apos;)){
		value = businesFlowA.equalsIgnoreCase(&quot;true&quot;) ? value : 0
	}
	else{
		value = businesFlowB.equalsIgnoreCase(&quot;true&quot;) ? value : 0
	}
	props.setProperty(key, value.toString())
}

log.info(&quot;normalLoad: {}&quot;, normalLoad)
log.info(&quot;businesFlowAWeight: {}&quot;, businesFlowAWeight)
log.info(&quot;SLATargetPerHour: {}&quot;, SLATargetPerHour)
log.info(&quot;weightRequest: {}&quot;, weightRequest)
log.info(&quot;weightSum: {}&quot;, weightSum)
log.info(&quot;test type: {}&quot;, typeTest)
log.info(&quot;requestMappings[&apos;4businesFlowB_weight&apos;]: {}&quot;, requestMappings[&apos;4businesFlowB_weight&apos;])
log.info(&quot;total_test_duration: {}&quot;, props.get(&quot;total_test_duration&quot;))

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup variables to control weight and RPS ALMOST PERFECT 2" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// Get user-defined variables
def disableTransactions = vars.get(&quot;disableTransactions&quot;) ?: &quot;&quot;
String[] disableTransactionsArray = disableTransactions.split(&quot;;&quot;)
List&lt;String&gt; disableTransactionsList = Arrays.asList(disableTransactionsArray)

def maxSteps = 40 // Same as the total number of steps set in Throughput Shaping Timer

// Define weight mappings
def weightMappings = [
    &apos;1transaction_weight&apos;: 100,
    &apos;2transaction_weight&apos;: 100,
    &apos;3transaction_weight&apos;: 30,
    &apos;4transaction_weight&apos;: 100, // Keep this fixed even if disabled
    &apos;5transaction_weight&apos;: 10,
    &apos;6transaction_weight&apos;: 10,
    &apos;7transaction_weight&apos;: 10,
    &apos;8transaction_weight&apos;: 30,
    &apos;9transaction_weight&apos;: 10,
    &apos;10transaction_weight&apos;: 30,
    &apos;11transaction_weight&apos;: 100,
    &apos;12transaction_weight&apos;: 15,
    &apos;13transaction_weight&apos;: 40,
    &apos;14transaction_weight&apos;: 40,
]

// Define request mappings
def requestMappings = [
    &apos;1transaction_weight&apos;: 11,
    &apos;2transaction_weight&apos;: 12,
    &apos;3transaction_weight&apos;: 1.3,
    &apos;4transaction_weight&apos;: 8,
    &apos;5transaction_weight&apos;: 2,
    &apos;6transaction_weight&apos;: 5,
    &apos;7transaction_weight&apos;: 4,
    &apos;8transaction_weight&apos;: 3,
    &apos;9transaction_weight&apos;: 3,
    &apos;10transaction_weight&apos;: 1,
    &apos;11transaction_weight&apos;: 4,
    &apos;12transaction_weight&apos;: 2,
    &apos;13transaction_weight&apos;: 7,
    &apos;14transaction_weight&apos;: 1
]

def weightRequest = 0
def weightSum = 0

// Adjust weights dynamically based on `disableTransactions`
weightMappings.each { key, value -&gt;
    def transactionId = key.replace(&quot;transaction_weight&quot;, &quot;&quot;)
    if (!disableTransactionsList.contains(transactionId)) {
        weightRequest += value * requestMappings[key]
        weightSum += value
    } else {
        if (key != &apos;4transaction_weight&apos;) {
            weightMappings[key] = 0 // Set weight to 0 for disabled transactions except SLA
        }
    }
}

// Expected number of bookings per hour
def SLATargetPerHour = Integer.parseInt(vars.get(&quot;SLATargetPerHour&quot;))

// Calculate booking-to-overall ratio, adjusting for whether SLA (4transaction_weight) is disabled
def SLATargetWeight = weightMappings[&apos;4transaction_weight&apos;]
def SLATargetRequest = requestMappings[&apos;4transaction_weight&apos;]
def SLATargetToOverall = SLATargetWeight &gt; 0 &amp;&amp; SLATargetRequest &gt; 0 ? weightRequest / (SLATargetWeight * SLATargetRequest) : 1 // Avoid division by zero

// Calculate `normalLoad`
def normalLoad = 0
if (SLATargetWeight &gt; 0 &amp;&amp; SLATargetRequest &gt; 0) {
    normalLoad = (((SLATargetPerHour / 3600) * weightRequest / weightSum) * SLATargetToOverall * 1.1)
}

// Update weight mappings in JMeter context
weightMappings.each { key, value -&gt;
    props.setProperty(key, value.toString())
}

log.info(&quot;disableTransactions: {}&quot;, disableTransactionsList)
log.info(&quot;normalLoad: {}&quot;, normalLoad)
log.info(&quot;SLATargetPerHour: {}&quot;, SLATargetPerHour)
log.info(&quot;weightRequest: {}&quot;, weightRequest)
log.info(&quot;weightSum: {}&quot;, weightSum)
log.info(&quot;requestMappings[&apos;4transaction_weight&apos;]: {}&quot;, requestMappings[&apos;4transaction_weight&apos;])
log.info(&quot;weightMappings: {}&quot;, weightMappings)
</stringProp>
          <stringProp name="TestPlan.comments">melhor entre todos</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup variables to control weight and RPS ALMOST PERFECT 3" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// Get user-defined variables
def disableTransactions = vars.get(&quot;disableTransactions&quot;) ?: &quot;&quot;
String[] disableTransactionsArray = disableTransactions.split(&quot;;&quot;)
List&lt;String&gt; disableTransactionsList = Arrays.asList(disableTransactionsArray)

def maxSteps = 40 // Same as the total number of steps set in Throughput Shaping Timer

// Define weight mappings
def weightMappings = [
    &apos;1transaction_weight&apos;: 100,
    &apos;2transaction_weight&apos;: 100,
    &apos;3transaction_weight&apos;: 30,
    &apos;4transaction_weight&apos;: 100,
    &apos;5transaction_weight&apos;: 10,
    &apos;6transaction_weight&apos;: 10,
    &apos;7transaction_weight&apos;: 30,
    &apos;8transaction_weight&apos;: 10,
    &apos;9transaction_weight&apos;: 30,
    &apos;10transaction_weight&apos;: 15,
    &apos;11transaction_weight&apos;: 100,
    &apos;12transaction_weight&apos;: 15,
    &apos;13transaction_weight&apos;: 40,
    &apos;14transaction_weight&apos;: 40,
]

// Define request mappings
def requestMappings = [
    &apos;1transaction_weight&apos;: 11,
    &apos;2transaction_weight&apos;: 12,
    &apos;3transaction_weight&apos;: 1.3,
    &apos;4transaction_weight&apos;: 8,
    &apos;5transaction_weight&apos;: 2,
    &apos;6transaction_weight&apos;: 5,
    &apos;7transaction_weight&apos;: 4,
    &apos;8transaction_weight&apos;: 3,
    &apos;9transaction_weight&apos;: 3,
    &apos;10transaction_weight&apos;: 1,
    &apos;11transaction_weight&apos;: 4,
    &apos;12transaction_weight&apos;: 2,
    &apos;13transaction_weight&apos;: 7,
    &apos;14transaction_weight&apos;: 1
]

def weightRequest = 0
def weightSum = 0

// Adjust weights dynamically based on `disableTransactions`
weightMappings.each { key, value -&gt;
    def transactionId = key.replace(&quot;transaction_weight&quot;, &quot;&quot;)
    if (!disableTransactionsList.contains(transactionId)) {
        weightRequest += value * requestMappings[key]
        weightSum += value
    } else {
        weightMappings[key] = 0 // Set weight to 0 for disabled transactions
    }
}

// Expected number of bookings per hour
def SLATargetPerHour = Integer.parseInt(vars.get(&quot;SLATargetPerHour&quot;))

// Calculate booking-to-overall ratio
def SLATargetWeight = weightMappings[&apos;4transaction_weight&apos;] // transaction number you chosen as reference
def SLATargetRequest = requestMappings[&apos;4transaction_weight&apos;] // transaction number you chosen as reference

if (disableTransactionsList.contains(&quot;4&quot;)) { // You have to set the transaction number you chosen as reference
    SLATargetWeight = 40 // Provide default value from weightMappings transaction picked as reference
    SLATargetRequest = 8  // Provide default value from requestMappings transaction picked as reference
}

def SLATargetToOverall = weightRequest / (SLATargetWeight * SLATargetRequest) // Ensure no division by zero

// Calculate `normalLoad`
def normalLoad = 0
if (SLATargetWeight &gt; 0 &amp;&amp; SLATargetRequest &gt; 0) {
    normalLoad = (((SLATargetPerHour / 3600) * weightRequest / weightSum) * SLATargetToOverall * 1.1)
}

// Update weight mappings in JMeter context
weightMappings.each { key, value -&gt;
    props.setProperty(key, value.toString())
}

def profile
def duration
def typeTest = vars.get(&quot;typeTest&quot;)

switch (typeTest) {
	case &quot;performance&quot;:
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/ numOfRamps

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad,		rampUp],
			[normalLoad,   	normalLoad,		stepDuration]
		  ]
		break

	case &quot;load&quot;:
		def numOfRamps = 4
		def rampUp = 60
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration/numOfRamps - rampUp)

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 0.25,	rampUp],
			[normalLoad * 0.25,	normalLoad * 0.25,	stepDuration],
			[normalLoad * 0.25,	normalLoad * 0.5,	rampUp],
			[normalLoad * 0.5,	normalLoad * 0.5,	stepDuration],
			[normalLoad * 0.5,	normalLoad * 0.75,  rampUp],
			[normalLoad * 0.75,	normalLoad * 0.75,	stepDuration],
			[normalLoad * 0.75,	normalLoad * 1,	rampUp],
			[normalLoad * 1,	normalLoad * 1,	stepDuration]
		  ]
		break

	case &quot;stress&quot;:
		def numOfRamps = 20
		def rampUp = 60		
		def stepDuration = 180
		duration = 60 * 60 * 1.5 // last step duration
		def finalDuration = 60 * 13

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 2,  	rampUp],
			[normalLoad * 2,	normalLoad * 2,  	stepDuration],
			[normalLoad * 2,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 4,  	rampUp],
			[normalLoad * 4,	normalLoad * 4,  	stepDuration],
			[normalLoad * 4,	normalLoad * 5,  	rampUp],
			[normalLoad * 5,	normalLoad * 5,  	stepDuration],
			[normalLoad * 5,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[normalLoad * 6,	normalLoad * 7,  	rampUp],
			[normalLoad * 7,	normalLoad * 7,  	stepDuration],
			[normalLoad * 7,	normalLoad * 8,  	rampUp],
			[normalLoad * 8,	normalLoad * 8,  	stepDuration],
			[normalLoad * 8,	normalLoad * 9,  	rampUp],
			[normalLoad * 9,	normalLoad * 9,  	stepDuration],
			[normalLoad * 9,	normalLoad * 10,  	rampUp],
			[normalLoad * 10,	normalLoad * 10,  	stepDuration],
			[normalLoad * 10,	normalLoad * 11,  	rampUp],
			[normalLoad * 11,	normalLoad * 11,  	stepDuration],
			[normalLoad * 11,	normalLoad * 12,  	rampUp],
			[normalLoad * 12,	normalLoad * 12,  	stepDuration],
			[normalLoad * 12,	normalLoad * 13,  	rampUp],
			[normalLoad * 13,	normalLoad * 13,  	stepDuration],
			[normalLoad * 13,	normalLoad * 14,  	rampUp],
			[normalLoad * 14,	normalLoad * 14,  	stepDuration],
			[normalLoad * 14,	normalLoad * 15,  	rampUp],
			[normalLoad * 15,	normalLoad * 15,  	stepDuration],
			[normalLoad * 15,	normalLoad * 16,  	rampUp],
			[normalLoad * 16,	normalLoad * 16,  	stepDuration],
			[normalLoad * 16,	normalLoad * 17,  	rampUp],
			[normalLoad * 17,	normalLoad * 17,  	stepDuration],
			[normalLoad * 17,	normalLoad * 18,  	rampUp],
			[normalLoad * 18,	normalLoad * 18,  	stepDuration],
			[normalLoad * 18,	normalLoad * 19,  	rampUp],
			[normalLoad * 19,	normalLoad * 19,  	stepDuration],
			[normalLoad * 19,	normalLoad * 20,  	rampUp],
			[normalLoad * 20,	normalLoad * 20,  	finalDuration]
		  ]
		break

	case &quot;spike&quot;:
		def numOfRamps = 4
		def rampUp = 60 //sec
		duration = 60 * 60 * 1.5 // sec * min * hour
		def postMonitoringDuration = 60 * 30 //sec * min
		def stepDuration = Math.round((duration - postMonitoringDuration)/numOfRamps - rampUp)
		  // 5 minutes or whatever you intend

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[1,				1,				postMonitoringDuration]
		  ]
		break

	case &quot;endurance&quot;:
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 8 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/numOfRamps

		profile = [
			//start_rps			end_rps				duration
			[1,					normalLoad * 1,	  	rampUp],
			[normalLoad * 1,		normalLoad * 1,	  	stepDuration]
		  ]
		break
}

def nLines = profile.size()

for (int i=0; i&lt; nLines ; i++){
	props.put(&quot;start_rps&quot; + String.valueOf(i+1), String.valueOf(profile[i][0]))
	props.put(&quot;end_rps&quot;   + String.valueOf(i+1), String.valueOf(profile[i][1]))
	props.put(&quot;duration&quot;  + String.valueOf(i+1), String.valueOf(profile[i][2]))

	log.info(&quot;start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}&quot;,
	String.valueOf(i+1), String.valueOf(profile[i][0]),
	String.valueOf(i+1), String.valueOf(profile[i][1]),
	String.valueOf(i+1), String.valueOf(profile[i][2])
	)
}

for (int i=nLines; i&lt; maxSteps ; i++){
	props.put(&quot;start_rps&quot; + String.valueOf(i+1), &quot;0&quot;)
	props.put(&quot;end_rps&quot;   + String.valueOf(i+1), &quot;0&quot;)
	props.put(&quot;duration&quot;  + String.valueOf(i+1), &quot;0&quot;)

	log.info(&quot;start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}&quot;,
	String.valueOf(i+1), props.get(&quot;start_rps&quot; + String.valueOf(i+1)),
	String.valueOf(i+1), props.get(&quot;end_rps&quot; + String.valueOf(i+1)),
	String.valueOf(i+1), props.get(&quot;duration&quot; + String.valueOf(i+1))
	)
}

props.put(&quot;total_test_duration&quot;,String.valueOf(Math.round(duration)))	

log.info(&quot;test type: {}&quot;, typeTest)
log.info(&quot;disableTransactions: {}&quot;, disableTransactionsList)
log.info(&quot;normalLoad: {}&quot;, normalLoad)
log.info(&quot;SLATargetPerHour: {}&quot;, SLATargetPerHour)
log.info(&quot;weightRequest: {}&quot;, weightRequest)
log.info(&quot;weightSum: {}&quot;, weightSum)
log.info(&quot;requestMappings[&apos;4transaction_weight&apos;]: {}&quot;, requestMappings[&apos;4transaction_weight&apos;])
log.info(&quot;total_test_duration: {}&quot;, props.get(&quot;total_test_duration&quot;))

SampleResult.setIgnore();</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup variables to control weight and RPS ALMOST PERFECT 4" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// Retrieve the list of disabled transactions
def disableTransactions = vars.get(&quot;disableTransactions&quot;) ?: &quot;&quot;
String[] disableTransactionsArray = disableTransactions.split(&quot;;&quot;)
List&lt;String&gt; disableTransactionsList = Arrays.asList(disableTransactionsArray)

// Define the maximum number of steps
def maxSteps = 40 // Same as the total number of steps set in Throughput Shaping Timer

// Define weight mappings dynamically, adjusting based on disabled transactions
def weightMappings = [
    &apos;1transaction_weight&apos;:   disableTransactionsList?.contains(&quot;1&quot;) ? 0 : 100,
    &apos;2transaction_weight&apos;:   disableTransactionsList?.contains(&quot;2&quot;) ? 0 : 100,
    &apos;3transaction_weight&apos;:   disableTransactionsList?.contains(&quot;3&quot;) ? 0 : 30,
    &apos;4transaction_weight&apos;:   disableTransactionsList?.contains(&quot;4&quot;) ? 0 : 100, // SLA Target
    &apos;5transaction_weight&apos;:   disableTransactionsList?.contains(&quot;5&quot;) ? 0 : 10,
    &apos;6transaction_weight&apos;:   disableTransactionsList?.contains(&quot;6&quot;) ? 0 : 10,
    &apos;7transaction_weight&apos;:   disableTransactionsList?.contains(&quot;7&quot;) ? 0 : 10,
    &apos;8transaction_weight&apos;:   disableTransactionsList?.contains(&quot;8&quot;) ? 0 : 30,
    &apos;9transaction_weight&apos;:   disableTransactionsList?.contains(&quot;9&quot;) ? 0 : 10,
    &apos;10transaction_weight&apos;:  disableTransactionsList?.contains(&quot;10&quot;) ? 0 : 30,
    &apos;11transaction_weight&apos;:  disableTransactionsList?.contains(&quot;11&quot;) ? 0 : 100,
    &apos;12transaction_weight&apos;:  disableTransactionsList?.contains(&quot;12&quot;) ? 0 : 15,
    &apos;13transaction_weight&apos;:  disableTransactionsList?.contains(&quot;13&quot;) ? 0 : 40,
    &apos;14transaction_weight&apos;:  disableTransactionsList?.contains(&quot;14&quot;) ? 0 : 40
    // Extend as needed...
]

// Define the request mappings
def requestMappings = [
    &apos;1transaction_weight&apos;:   11,
    &apos;2transaction_weight&apos;:   12,
    &apos;3transaction_weight&apos;:   1.3,
    &apos;4transaction_weight&apos;:   8,  // SLA Target
    &apos;5transaction_weight&apos;:   2,
    &apos;6transaction_weight&apos;:   5,
    &apos;7transaction_weight&apos;:   4,
    &apos;8transaction_weight&apos;:   3,
    &apos;9transaction_weight&apos;:   3,
    &apos;10transaction_weight&apos;:  1,
    &apos;11transaction_weight&apos;:  4,
    &apos;12transaction_weight&apos;:  2,
    &apos;13transaction_weight&apos;:  7,
    &apos;14transaction_weight&apos;:  1
    // Extend as needed...
]

// Calculate weightRequest and weightSum
def weightRequest = 0
def weightSum = 0

// Set the variables dynamically
weightMappings.each { key, value -&gt;
    // Apply weight only if the transaction is not disabled
    weightRequest += value * requestMappings[key]
    weightSum += value
    // log.info(&quot;request {} sum {}&quot;,weightRequest, weightSum)
}

// Define the SLA transaction key and calculate its influence
def SLATargetKey = &apos;4transaction_weight&apos; // Transaction that defines the SLA
def SLATargetWeight = weightMappings[SLATargetKey]
def SLATargetRequest = requestMappings[SLATargetKey]
def SLATargetToOverall = (SLATargetWeight &gt; 0 &amp;&amp; SLATargetRequest &gt; 0) ? weightRequest / (SLATargetRequest * SLATargetWeight) : 1

// Adjust transactionWeights dynamically based on the condition of other transactions
def transactionWeights = [:]
weightMappings.each { key, value -&gt;
    if (key == SLATargetKey) {
        // SLA transaction logic
        transactionWeights[key] = disableTransactionsList?.contains(&quot;4&quot;) ? 
            (weightMappings[&apos;4transaction_weight&apos;] * requestMappings[&apos;4transaction_weight&apos;] / weightRequest) : 
            weightMappings[&apos;1transaction_weight&apos;] * requestMappings[&apos;1transaction_weight&apos;] / weightRequest
    } else {
        // Default logic for other transactions
        transactionWeights[key] = value &gt; 0 ? (value * requestMappings[key] / weightRequest) : 1
    }
}

// Retrieve the SLA target per hour
def SLATargetPerHour = Integer.parseInt(vars.get(&quot;SLATargetPerHour&quot;))

// Calculate normalLoad considering the SLA target
def normalLoad = 0
if (SLATargetWeight &gt; 0 &amp;&amp; SLATargetRequest &gt; 0) {
    normalLoad = (((SLATargetPerHour / 3600) * weightRequest / weightSum) * SLATargetToOverall * transactionWeights[SLATargetKey]) * 1.1
}

log.info(&quot;disableTransactions: {}&quot;, disableTransactionsList)
log.info(&quot;normalLoad: {}&quot;, normalLoad)
log.info(&quot;SLATargetPerHour: {}&quot;, SLATargetPerHour)
log.info(&quot;weightRequest: {}&quot;, weightRequest)
log.info(&quot;weightSum: {}&quot;, weightSum)
log.info(&quot;requestMappings[&apos;4transaction_weight&apos;]: {}&quot;, requestMappings[&apos;4transaction_weight&apos;])
log.info(&quot;weightMappings: {}&quot;, weightMappings)</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Setup variables to control weight and RPS ALMOST PERFECT 4">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">// Get user-defined variables
def disableTransactions = vars.get(&quot;disableTransactions&quot;) ?: &quot;&quot;
String[] disableTransactionsArray = disableTransactions.split(&quot;;&quot;)
List&lt;String&gt; disableTransactionsList = Arrays.asList(disableTransactionsArray)

def maxSteps = 40 // Same as the total number of steps set in Throughput Shaping Timer

// Define weight mappings
def weightMappings = [
    &apos;1transaction_weight&apos;: 100,
    &apos;2transaction_weight&apos;: 100,
    &apos;3transaction_weight&apos;: 30,
    &apos;4transaction_weight&apos;: 100, // Keep this fixed even if disabled
    &apos;5transaction_weight&apos;: 10,
    &apos;6transaction_weight&apos;: 10,
    &apos;7transaction_weight&apos;: 10,
    &apos;8transaction_weight&apos;: 30,
    &apos;9transaction_weight&apos;: 10,
    &apos;10transaction_weight&apos;: 30,
    &apos;11transaction_weight&apos;: 100,
    &apos;12transaction_weight&apos;: 15,
    &apos;13transaction_weight&apos;: 40,
    &apos;14transaction_weight&apos;: 40,
]

// Define request mappings
def requestMappings = [
    &apos;1transaction_weight&apos;: 11,
    &apos;2transaction_weight&apos;: 12,
    &apos;3transaction_weight&apos;: 1.3,
    &apos;4transaction_weight&apos;: 8,
    &apos;5transaction_weight&apos;: 2,
    &apos;6transaction_weight&apos;: 5,
    &apos;7transaction_weight&apos;: 4,
    &apos;8transaction_weight&apos;: 3,
    &apos;9transaction_weight&apos;: 3,
    &apos;10transaction_weight&apos;: 1,
    &apos;11transaction_weight&apos;: 4,
    &apos;12transaction_weight&apos;: 2,
    &apos;13transaction_weight&apos;: 7,
    &apos;14transaction_weight&apos;: 1
]

def weightRequest = 0
def weightSum = 0

// Adjust weights dynamically based on `disableTransactions`
weightMappings.each { key, value -&gt;
    def transactionId = key.replace(&quot;transaction_weight&quot;, &quot;&quot;)
    if (!disableTransactionsList.contains(transactionId)) {
        weightRequest += value * requestMappings[key]
        weightSum += value
    } else {
        weightMappings[key] = 0 // Set weight to 0 for disabled transactions
    }
}

// Expected number of bookings per hour
def SLATargetPerHour = Integer.parseInt(vars.get(&quot;SLATargetPerHour&quot;))

// Calculate booking-to-overall ratio, adjusting for whether SLA (4transaction_weight) is disabled
def SLATargetWeight = weightMappings[&apos;4transaction_weight&apos;] // This will be the Main Transaction for SLA reference
def SLATargetRequest = requestMappings[&apos;4transaction_weight&apos;] // This will be the Main Transaction for SLA reference

// If SLA (4transaction_weight) is not disabled, calculate its influence on the load, else ignore it in SLATargetToOverall
def SLATargetToOverall = 1
if (SLATargetWeight &gt; 0 &amp;&amp; SLATargetRequest &gt; 0) {
    SLATargetToOverall = weightRequest / (SLATargetWeight * SLATargetRequest) // Ensure no division by zero
}

// Calculate `normalLoad` based on the remaining weight (after disabling transactions)
def normalLoad = 0
if (weightSum &gt; 0) {
    // Calculate the normal load, considering whether SLA (4transaction_weight) is disabled or not
    if (SLATargetWeight &gt; 0 &amp;&amp; SLATargetRequest &gt; 0) {
        normalLoad = (((SLATargetPerHour / 3600) * weightRequest / weightSum) * SLATargetToOverall * 1.15) // the * 1.15 is a extra to reach target
    } else {
        // When SLA is disabled, calculate based only on the remaining weights
        normalLoad = (((SLATargetPerHour / 3600) * weightRequest / weightSum) * 1.15) // the * 1.15 is a extra to reach target
    }
}

// Update weight mappings in JMeter context
weightMappings.each { key, value -&gt;
    props.setProperty(key, value.toString())
}

log.info(&quot;disableTransactions: {}&quot;, disableTransactionsList)
log.info(&quot;normalLoad: {}&quot;, normalLoad)
log.info(&quot;SLATargetPerHour: {}&quot;, SLATargetPerHour)
log.info(&quot;weightRequest: {}&quot;, weightRequest)
log.info(&quot;weightSum: {}&quot;, weightSum)
log.info(&quot;requestMappings[&apos;4transaction_weight&apos;]: {}&quot;, requestMappings[&apos;4transaction_weight&apos;])
log.info(&quot;weightMappings: {}&quot;, weightMappings)

def profile
def duration
def typeTest = vars.get(&quot;typeTest&quot;)

// 4000/3600 * 3390 / 420 * 8 = 71.74
// def normalLoad = ((bookingsPerHour/3600) * weightRequest / weightSum) * requestMappings[&apos;4targetTab_weight&apos;] * dashboardWeight

switch (typeTest) {
	case &quot;performance&quot;:
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/ numOfRamps

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad,		rampUp],
			[normalLoad,   	normalLoad,		stepDuration]
		  ]
		break

	case &quot;load&quot;:
		def numOfRamps = 4
		def rampUp = 60
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration/numOfRamps - rampUp)

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 0.25,	rampUp],
			[normalLoad * 0.25,	normalLoad * 0.25,	stepDuration],
			[normalLoad * 0.25,	normalLoad * 0.5,	rampUp],
			[normalLoad * 0.5,	normalLoad * 0.5,	stepDuration],
			[normalLoad * 0.5,	normalLoad * 0.75,  rampUp],
			[normalLoad * 0.75,	normalLoad * 0.75,	stepDuration],
			[normalLoad * 0.75,	normalLoad * 1,	rampUp],
			[normalLoad * 1,	normalLoad * 1,	stepDuration]
		  ]
		break

	case &quot;stress&quot;:
		def numOfRamps = 20
		def rampUp = 60		
		def stepDuration = 180
		duration = 60 * 60 * 1.5 // last step duration
		def finalDuration = 60 * 13

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 2,  	rampUp],
			[normalLoad * 2,	normalLoad * 2,  	stepDuration],
			[normalLoad * 2,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 4,  	rampUp],
			[normalLoad * 4,	normalLoad * 4,  	stepDuration],
			[normalLoad * 4,	normalLoad * 5,  	rampUp],
			[normalLoad * 5,	normalLoad * 5,  	stepDuration],
			[normalLoad * 5,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[normalLoad * 6,	normalLoad * 7,  	rampUp],
			[normalLoad * 7,	normalLoad * 7,  	stepDuration],
			[normalLoad * 7,	normalLoad * 8,  	rampUp],
			[normalLoad * 8,	normalLoad * 8,  	stepDuration],
			[normalLoad * 8,	normalLoad * 9,  	rampUp],
			[normalLoad * 9,	normalLoad * 9,  	stepDuration],
			[normalLoad * 9,	normalLoad * 10,  	rampUp],
			[normalLoad * 10,	normalLoad * 10,  	stepDuration],
			[normalLoad * 10,	normalLoad * 11,  	rampUp],
			[normalLoad * 11,	normalLoad * 11,  	stepDuration],
			[normalLoad * 11,	normalLoad * 12,  	rampUp],
			[normalLoad * 12,	normalLoad * 12,  	stepDuration],
			[normalLoad * 12,	normalLoad * 13,  	rampUp],
			[normalLoad * 13,	normalLoad * 13,  	stepDuration],
			[normalLoad * 13,	normalLoad * 14,  	rampUp],
			[normalLoad * 14,	normalLoad * 14,  	stepDuration],
			[normalLoad * 14,	normalLoad * 15,  	rampUp],
			[normalLoad * 15,	normalLoad * 15,  	stepDuration],
			[normalLoad * 15,	normalLoad * 16,  	rampUp],
			[normalLoad * 16,	normalLoad * 16,  	stepDuration],
			[normalLoad * 16,	normalLoad * 17,  	rampUp],
			[normalLoad * 17,	normalLoad * 17,  	stepDuration],
			[normalLoad * 17,	normalLoad * 18,  	rampUp],
			[normalLoad * 18,	normalLoad * 18,  	stepDuration],
			[normalLoad * 18,	normalLoad * 19,  	rampUp],
			[normalLoad * 19,	normalLoad * 19,  	stepDuration],
			[normalLoad * 19,	normalLoad * 20,  	rampUp],
			[normalLoad * 20,	normalLoad * 20,  	finalDuration]
		  ]
		break

	case &quot;spike&quot;:
		def numOfRamps = 4
		def rampUp = 60 //sec
		duration = 60 * 60 * 1.5 // sec * min * hour
		def postMonitoringDuration = 60 * 30 //sec * min
		def stepDuration = Math.round((duration - postMonitoringDuration)/numOfRamps - rampUp)
		  // 5 minutes or whatever you intend

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[1,				1,				postMonitoringDuration]
		  ]
		break

	case &quot;endurance&quot;:
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 8 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/numOfRamps

		profile = [
			//start_rps			end_rps				duration
			[1,					normalLoad * 1,	  	rampUp],
			[normalLoad * 1,		normalLoad * 1,	  	stepDuration]
		  ]
		break
}

def nLines = profile.size()

for (int i=0; i&lt; nLines ; i++){
	props.put(&quot;start_rps&quot; + String.valueOf(i+1), String.valueOf(profile[i][0]))
	props.put(&quot;end_rps&quot;   + String.valueOf(i+1), String.valueOf(profile[i][1]))
	props.put(&quot;duration&quot;  + String.valueOf(i+1), String.valueOf(profile[i][2]))

	log.info(&quot;start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}&quot;,
	String.valueOf(i+1), String.valueOf(profile[i][0]),
	String.valueOf(i+1), String.valueOf(profile[i][1]),
	String.valueOf(i+1), String.valueOf(profile[i][2])
	)
}

for (int i=nLines; i&lt; maxSteps ; i++){
	props.put(&quot;start_rps&quot; + String.valueOf(i+1), &quot;0&quot;)
	props.put(&quot;end_rps&quot;   + String.valueOf(i+1), &quot;0&quot;)
	props.put(&quot;duration&quot;  + String.valueOf(i+1), &quot;0&quot;)

	log.info(&quot;start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}&quot;,
	String.valueOf(i+1), props.get(&quot;start_rps&quot; + String.valueOf(i+1)),
	String.valueOf(i+1), props.get(&quot;end_rps&quot; + String.valueOf(i+1)),
	String.valueOf(i+1), props.get(&quot;duration&quot; + String.valueOf(i+1))
	)
}
props.put(&quot;total_test_duration&quot;,String.valueOf(Math.round(duration)))	

log.info(&quot;test type: {}&quot;, typeTest)
log.info(&quot;total_test_duration: {}&quot;, props.get(&quot;total_test_duration&quot;))

SampleResult.setIgnore();
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Authentication">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1049922310">0. Authentication</stringProp>
            <stringProp name="487650456">0. Authentication Transaction</stringProp>
            <stringProp name="487650456">0. Authentication Transaction</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler setup variables" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Renew session">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <stringProp name="ThreadGroup.duration">${__P(total_test_duration,)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="0. Renew Session" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1049922310">0. Authentication</stringProp>
            <stringProp name="583038527">0. Renew Session Transaction</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="bzm - Concurrency Thread Group">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${__tstFeedback(Throughput,1,2000,50)}</stringProp>
        <stringProp name="RampUp"></stringProp>
        <stringProp name="Steps"></stringProp>
        <stringProp name="Hold">${__P(total_test_duration,)}</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="1.Complex Front End">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="764597751">Test Plan</stringProp>
            <stringProp name="-1021164827">1.ComplexFrontEnd</stringProp>
            <stringProp name="-1021164827">1.ComplexFrontEnd</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="Throughput" enabled="false">
          <collectionProp name="load_profile">
            <collectionProp name="2053545880">
              <stringProp name="1170891448">${__P(start_rps1,)}</stringProp>
              <stringProp name="546029169">${__P(end_rps1,)}</stringProp>
              <stringProp name="-636906254">${__P(duration1,)}</stringProp>
            </collectionProp>
            <collectionProp name="-2119501080">
              <stringProp name="1170921239">${__P(start_rps2,)}</stringProp>
              <stringProp name="546058960">${__P(end_rps2,)}</stringProp>
              <stringProp name="-636876463">${__P(duration2,)}</stringProp>
            </collectionProp>
            <collectionProp name="643239809">
              <stringProp name="1170951030">${__P(start_rps3,)}</stringProp>
              <stringProp name="546088751">${__P(end_rps3,)}</stringProp>
              <stringProp name="-636846672">${__P(duration3,)}</stringProp>
            </collectionProp>
            <collectionProp name="-837295265">
              <stringProp name="1170980821">${__P(start_rps4,)}</stringProp>
              <stringProp name="546118542">${__P(end_rps4,)}</stringProp>
              <stringProp name="-636816881">${__P(duration4,)}</stringProp>
            </collectionProp>
            <collectionProp name="557427343">
              <stringProp name="1171010612">${__P(start_rps5,)}</stringProp>
              <stringProp name="546148333">${__P(end_rps5,)}</stringProp>
              <stringProp name="-636787090">${__P(duration5,)}</stringProp>
            </collectionProp>
            <collectionProp name="-975546538">
              <stringProp name="1171040403">${__P(start_rps6,)}</stringProp>
              <stringProp name="546178124">${__P(end_rps6,)}</stringProp>
              <stringProp name="-636757299">${__P(duration6,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1784776922">
              <stringProp name="1171070194">${__P(start_rps7,)}</stringProp>
              <stringProp name="546207915">${__P(end_rps7,)}</stringProp>
              <stringProp name="-636727508">${__P(duration7,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1227948211">
              <stringProp name="1171099985">${__P(start_rps8,)}</stringProp>
              <stringProp name="546237706">${__P(end_rps8,)}</stringProp>
              <stringProp name="-636697717">${__P(duration8,)}</stringProp>
            </collectionProp>
            <collectionProp name="-366075235">
              <stringProp name="1171129776">${__P(start_rps9,)}</stringProp>
              <stringProp name="546267497">${__P(end_rps9,)}</stringProp>
              <stringProp name="-636667926">${__P(duration9,)}</stringProp>
            </collectionProp>
            <collectionProp name="1073492332">
              <stringProp name="1938016088">${__P(start_rps10,)}</stringProp>
              <stringProp name="-252845377">${__P(end_rps10,)}</stringProp>
              <stringProp name="1730862174">${__P(duration10,)}</stringProp>
            </collectionProp>
            <collectionProp name="1265814886">
              <stringProp name="1938045879">${__P(start_rps11,)}</stringProp>
              <stringProp name="-252815586">${__P(end_rps11,)}</stringProp>
              <stringProp name="1730891965">${__P(duration11,)}</stringProp>
            </collectionProp>
            <collectionProp name="2124768621">
              <stringProp name="1938075670">${__P(start_rps12,)}</stringProp>
              <stringProp name="-252785795">${__P(end_rps12,)}</stringProp>
              <stringProp name="1730921756">${__P(duration12,)}</stringProp>
            </collectionProp>
            <collectionProp name="1159933474">
              <stringProp name="1938105461">${__P(start_rps13,)}</stringProp>
              <stringProp name="-252756004">${__P(end_rps13,)}</stringProp>
              <stringProp name="1730951547">${__P(duration13,)}</stringProp>
            </collectionProp>
            <collectionProp name="2070578542">
              <stringProp name="1938135252">${__P(start_rps14,)}</stringProp>
              <stringProp name="-252726213">${__P(end_rps14,)}</stringProp>
              <stringProp name="1730981338">${__P(duration14,)}</stringProp>
            </collectionProp>
            <collectionProp name="-596167869">
              <stringProp name="1938165043">${__P(start_rps15,)}</stringProp>
              <stringProp name="-252696422">${__P(end_rps15,)}</stringProp>
              <stringProp name="1731011129">${__P(duration15,)}</stringProp>
            </collectionProp>
            <collectionProp name="-403844538">
              <stringProp name="1938194834">${__P(start_rps16,)}</stringProp>
              <stringProp name="-252666631">${__P(end_rps16,)}</stringProp>
              <stringProp name="1731040920">${__P(duration16,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1392573989">
              <stringProp name="1938224625">${__P(start_rps17,)}</stringProp>
              <stringProp name="-252636840">${__P(end_rps17,)}</stringProp>
              <stringProp name="1731070711">${__P(duration17,)}</stringProp>
            </collectionProp>
            <collectionProp name="258770416">
              <stringProp name="1938254416">${__P(start_rps18,)}</stringProp>
              <stringProp name="-252607049">${__P(end_rps18,)}</stringProp>
              <stringProp name="1731100502">${__P(duration18,)}</stringProp>
            </collectionProp>
            <collectionProp name="399377550">
              <stringProp name="1938284207">${__P(start_rps19,)}</stringProp>
              <stringProp name="-252577258">${__P(end_rps19,)}</stringProp>
              <stringProp name="1731130293">${__P(duration19,)}</stringProp>
            </collectionProp>
            <collectionProp name="809715457">
              <stringProp name="1938939609">${__P(start_rps20,)}</stringProp>
              <stringProp name="-251921856">${__P(end_rps20,)}</stringProp>
              <stringProp name="1731785695">${__P(duration20,)}</stringProp>
            </collectionProp>
            <collectionProp name="1691816799">
              <stringProp name="1938969400">${__P(start_rps21,)}</stringProp>
              <stringProp name="-251892065">${__P(end_rps21,)}</stringProp>
              <stringProp name="1731815486">${__P(duration21,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1715653036">
              <stringProp name="1938999191">${__P(start_rps22,)}</stringProp>
              <stringProp name="-251862274">${__P(end_rps22,)}</stringProp>
              <stringProp name="1731845277">${__P(duration22,)}</stringProp>
            </collectionProp>
            <collectionProp name="2121941047">
              <stringProp name="1939028982">${__P(start_rps23,)}</stringProp>
              <stringProp name="-251832483">${__P(end_rps23,)}</stringProp>
              <stringProp name="1731875068">${__P(duration23,)}</stringProp>
            </collectionProp>
            <collectionProp name="-545552061">
              <stringProp name="1939058773">${__P(start_rps24,)}</stringProp>
              <stringProp name="-251802692">${__P(end_rps24,)}</stringProp>
              <stringProp name="1731904859">${__P(duration24,)}</stringProp>
            </collectionProp>
            <collectionProp name="-404173366">
              <stringProp name="1939088564">${__P(start_rps25,)}</stringProp>
              <stringProp name="-251772901">${__P(end_rps25,)}</stringProp>
              <stringProp name="1731934650">${__P(duration25,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1369755210">
              <stringProp name="1939118355">${__P(start_rps26,)}</stringProp>
              <stringProp name="-251743110">${__P(end_rps26,)}</stringProp>
              <stringProp name="1731964441">${__P(duration26,)}</stringProp>
            </collectionProp>
            <collectionProp name="-459134229">
              <stringProp name="1939148146">${__P(start_rps27,)}</stringProp>
              <stringProp name="-251713319">${__P(end_rps27,)}</stringProp>
              <stringProp name="1731994232">${__P(duration27,)}</stringProp>
            </collectionProp>
            <collectionProp name="451510839">
              <stringProp name="1939177937">${__P(start_rps28,)}</stringProp>
              <stringProp name="-251683528">${__P(end_rps28,)}</stringProp>
              <stringProp name="1732024023">${__P(duration28,)}</stringProp>
            </collectionProp>
            <collectionProp name="-537965309">
              <stringProp name="1939207728">${__P(start_rps29,)}</stringProp>
              <stringProp name="-251653737">${__P(end_rps29,)}</stringProp>
              <stringProp name="1732053814">${__P(duration29,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1781003361">
              <stringProp name="1939863130">${__P(start_rps30,)}</stringProp>
              <stringProp name="-250998335">${__P(end_rps30,)}</stringProp>
              <stringProp name="1732709216">${__P(duration30,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1587934110">
              <stringProp name="1939892921">${__P(start_rps31,)}</stringProp>
              <stringProp name="-250968544">${__P(end_rps31,)}</stringProp>
              <stringProp name="1732739007">${__P(duration31,)}</stringProp>
            </collectionProp>
            <collectionProp name="1717532951">
              <stringProp name="1939922712">${__P(start_rps32,)}</stringProp>
              <stringProp name="-250938753">${__P(end_rps32,)}</stringProp>
              <stringProp name="1732768798">${__P(duration32,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1666789277">
              <stringProp name="1939952503">${__P(start_rps33,)}</stringProp>
              <stringProp name="-250908962">${__P(end_rps33,)}</stringProp>
              <stringProp name="1732798589">${__P(duration33,)}</stringProp>
            </collectionProp>
            <collectionProp name="-808581462">
              <stringProp name="1939982294">${__P(start_rps34,)}</stringProp>
              <stringProp name="-250879171">${__P(end_rps34,)}</stringProp>
              <stringProp name="1732828380">${__P(duration34,)}</stringProp>
            </collectionProp>
            <collectionProp name="-486190817">
              <stringProp name="1940012085">${__P(start_rps35,)}</stringProp>
              <stringProp name="-250849380">${__P(end_rps35,)}</stringProp>
              <stringProp name="1732858171">${__P(duration35,)}</stringProp>
            </collectionProp>
            <collectionProp name="-293892350">
              <stringProp name="1940041876">${__P(start_rps36,)}</stringProp>
              <stringProp name="-250819589">${__P(end_rps36,)}</stringProp>
              <stringProp name="1732887962">${__P(duration36,)}</stringProp>
            </collectionProp>
            <collectionProp name="564314688">
              <stringProp name="1940071667">${__P(start_rps37,)}</stringProp>
              <stringProp name="-250789798">${__P(end_rps37,)}</stringProp>
              <stringProp name="1732917753">${__P(duration37,)}</stringProp>
            </collectionProp>
            <collectionProp name="317055358">
              <stringProp name="1940101458">${__P(start_rps38,)}</stringProp>
              <stringProp name="-250760007">${__P(end_rps38,)}</stringProp>
              <stringProp name="1732947544">${__P(duration38,)}</stringProp>
            </collectionProp>
            <collectionProp name="1227700426">
              <stringProp name="1940131249">${__P(start_rps39,)}</stringProp>
              <stringProp name="-250730216">${__P(end_rps39,)}</stringProp>
              <stringProp name="1732977335">${__P(duration39,)}</stringProp>
            </collectionProp>
            <collectionProp name="1661932637">
              <stringProp name="1940786651">${__P(start_rps40,)}</stringProp>
              <stringProp name="-250074814">${__P(end_rps40,)}</stringProp>
              <stringProp name="1733632737">${__P(duration40,)}</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="Throughput">
          <collectionProp name="load_profile">
            <collectionProp name="-2119501080">
              <stringProp name="1170921239">${__P(start_rps2,)}</stringProp>
              <stringProp name="546058960">${__P(end_rps2,)}</stringProp>
              <stringProp name="-636876463">${__P(duration2,)}</stringProp>
            </collectionProp>
            <collectionProp name="643239809">
              <stringProp name="1170951030">${__P(start_rps3,)}</stringProp>
              <stringProp name="546088751">${__P(end_rps3,)}</stringProp>
              <stringProp name="-636846672">${__P(duration3,)}</stringProp>
            </collectionProp>
            <collectionProp name="-837295265">
              <stringProp name="1170980821">${__P(start_rps4,)}</stringProp>
              <stringProp name="546118542">${__P(end_rps4,)}</stringProp>
              <stringProp name="-636816881">${__P(duration4,)}</stringProp>
            </collectionProp>
            <collectionProp name="557427343">
              <stringProp name="1171010612">${__P(start_rps5,)}</stringProp>
              <stringProp name="546148333">${__P(end_rps5,)}</stringProp>
              <stringProp name="-636787090">${__P(duration5,)}</stringProp>
            </collectionProp>
            <collectionProp name="-975546538">
              <stringProp name="1171040403">${__P(start_rps6,)}</stringProp>
              <stringProp name="546178124">${__P(end_rps6,)}</stringProp>
              <stringProp name="-636757299">${__P(duration6,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1784776922">
              <stringProp name="1171070194">${__P(start_rps7,)}</stringProp>
              <stringProp name="546207915">${__P(end_rps7,)}</stringProp>
              <stringProp name="-636727508">${__P(duration7,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1227948211">
              <stringProp name="1171099985">${__P(start_rps8,)}</stringProp>
              <stringProp name="546237706">${__P(end_rps8,)}</stringProp>
              <stringProp name="-636697717">${__P(duration8,)}</stringProp>
            </collectionProp>
            <collectionProp name="-366075235">
              <stringProp name="1171129776">${__P(start_rps9,)}</stringProp>
              <stringProp name="546267497">${__P(end_rps9,)}</stringProp>
              <stringProp name="-636667926">${__P(duration9,)}</stringProp>
            </collectionProp>
            <collectionProp name="1073492332">
              <stringProp name="1938016088">${__P(start_rps10,)}</stringProp>
              <stringProp name="-252845377">${__P(end_rps10,)}</stringProp>
              <stringProp name="1730862174">${__P(duration10,)}</stringProp>
            </collectionProp>
            <collectionProp name="1265814886">
              <stringProp name="1938045879">${__P(start_rps11,)}</stringProp>
              <stringProp name="-252815586">${__P(end_rps11,)}</stringProp>
              <stringProp name="1730891965">${__P(duration11,)}</stringProp>
            </collectionProp>
            <collectionProp name="2124768621">
              <stringProp name="1938075670">${__P(start_rps12,)}</stringProp>
              <stringProp name="-252785795">${__P(end_rps12,)}</stringProp>
              <stringProp name="1730921756">${__P(duration12,)}</stringProp>
            </collectionProp>
            <collectionProp name="1159933474">
              <stringProp name="1938105461">${__P(start_rps13,)}</stringProp>
              <stringProp name="-252756004">${__P(end_rps13,)}</stringProp>
              <stringProp name="1730951547">${__P(duration13,)}</stringProp>
            </collectionProp>
            <collectionProp name="2070578542">
              <stringProp name="1938135252">${__P(start_rps14,)}</stringProp>
              <stringProp name="-252726213">${__P(end_rps14,)}</stringProp>
              <stringProp name="1730981338">${__P(duration14,)}</stringProp>
            </collectionProp>
            <collectionProp name="-596167869">
              <stringProp name="1938165043">${__P(start_rps15,)}</stringProp>
              <stringProp name="-252696422">${__P(end_rps15,)}</stringProp>
              <stringProp name="1731011129">${__P(duration15,)}</stringProp>
            </collectionProp>
            <collectionProp name="-403844538">
              <stringProp name="1938194834">${__P(start_rps16,)}</stringProp>
              <stringProp name="-252666631">${__P(end_rps16,)}</stringProp>
              <stringProp name="1731040920">${__P(duration16,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1392573989">
              <stringProp name="1938224625">${__P(start_rps17,)}</stringProp>
              <stringProp name="-252636840">${__P(end_rps17,)}</stringProp>
              <stringProp name="1731070711">${__P(duration17,)}</stringProp>
            </collectionProp>
            <collectionProp name="258770416">
              <stringProp name="1938254416">${__P(start_rps18,)}</stringProp>
              <stringProp name="-252607049">${__P(end_rps18,)}</stringProp>
              <stringProp name="1731100502">${__P(duration18,)}</stringProp>
            </collectionProp>
            <collectionProp name="399377550">
              <stringProp name="1938284207">${__P(start_rps19,)}</stringProp>
              <stringProp name="-252577258">${__P(end_rps19,)}</stringProp>
              <stringProp name="1731130293">${__P(duration19,)}</stringProp>
            </collectionProp>
            <collectionProp name="809715457">
              <stringProp name="1938939609">${__P(start_rps20,)}</stringProp>
              <stringProp name="-251921856">${__P(end_rps20,)}</stringProp>
              <stringProp name="1731785695">${__P(duration20,)}</stringProp>
            </collectionProp>
            <collectionProp name="1691816799">
              <stringProp name="1938969400">${__P(start_rps21,)}</stringProp>
              <stringProp name="-251892065">${__P(end_rps21,)}</stringProp>
              <stringProp name="1731815486">${__P(duration21,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1715653036">
              <stringProp name="1938999191">${__P(start_rps22,)}</stringProp>
              <stringProp name="-251862274">${__P(end_rps22,)}</stringProp>
              <stringProp name="1731845277">${__P(duration22,)}</stringProp>
            </collectionProp>
            <collectionProp name="2121941047">
              <stringProp name="1939028982">${__P(start_rps23,)}</stringProp>
              <stringProp name="-251832483">${__P(end_rps23,)}</stringProp>
              <stringProp name="1731875068">${__P(duration23,)}</stringProp>
            </collectionProp>
            <collectionProp name="-545552061">
              <stringProp name="1939058773">${__P(start_rps24,)}</stringProp>
              <stringProp name="-251802692">${__P(end_rps24,)}</stringProp>
              <stringProp name="1731904859">${__P(duration24,)}</stringProp>
            </collectionProp>
            <collectionProp name="-404173366">
              <stringProp name="1939088564">${__P(start_rps25,)}</stringProp>
              <stringProp name="-251772901">${__P(end_rps25,)}</stringProp>
              <stringProp name="1731934650">${__P(duration25,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1369755210">
              <stringProp name="1939118355">${__P(start_rps26,)}</stringProp>
              <stringProp name="-251743110">${__P(end_rps26,)}</stringProp>
              <stringProp name="1731964441">${__P(duration26,)}</stringProp>
            </collectionProp>
            <collectionProp name="-459134229">
              <stringProp name="1939148146">${__P(start_rps27,)}</stringProp>
              <stringProp name="-251713319">${__P(end_rps27,)}</stringProp>
              <stringProp name="1731994232">${__P(duration27,)}</stringProp>
            </collectionProp>
            <collectionProp name="451510839">
              <stringProp name="1939177937">${__P(start_rps28,)}</stringProp>
              <stringProp name="-251683528">${__P(end_rps28,)}</stringProp>
              <stringProp name="1732024023">${__P(duration28,)}</stringProp>
            </collectionProp>
            <collectionProp name="-537965309">
              <stringProp name="1939207728">${__P(start_rps29,)}</stringProp>
              <stringProp name="-251653737">${__P(end_rps29,)}</stringProp>
              <stringProp name="1732053814">${__P(duration29,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1781003361">
              <stringProp name="1939863130">${__P(start_rps30,)}</stringProp>
              <stringProp name="-250998335">${__P(end_rps30,)}</stringProp>
              <stringProp name="1732709216">${__P(duration30,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1587934110">
              <stringProp name="1939892921">${__P(start_rps31,)}</stringProp>
              <stringProp name="-250968544">${__P(end_rps31,)}</stringProp>
              <stringProp name="1732739007">${__P(duration31,)}</stringProp>
            </collectionProp>
            <collectionProp name="1717532951">
              <stringProp name="1939922712">${__P(start_rps32,)}</stringProp>
              <stringProp name="-250938753">${__P(end_rps32,)}</stringProp>
              <stringProp name="1732768798">${__P(duration32,)}</stringProp>
            </collectionProp>
            <collectionProp name="-1666789277">
              <stringProp name="1939952503">${__P(start_rps33,)}</stringProp>
              <stringProp name="-250908962">${__P(end_rps33,)}</stringProp>
              <stringProp name="1732798589">${__P(duration33,)}</stringProp>
            </collectionProp>
            <collectionProp name="-808581462">
              <stringProp name="1939982294">${__P(start_rps34,)}</stringProp>
              <stringProp name="-250879171">${__P(end_rps34,)}</stringProp>
              <stringProp name="1732828380">${__P(duration34,)}</stringProp>
            </collectionProp>
            <collectionProp name="-486190817">
              <stringProp name="1940012085">${__P(start_rps35,)}</stringProp>
              <stringProp name="-250849380">${__P(end_rps35,)}</stringProp>
              <stringProp name="1732858171">${__P(duration35,)}</stringProp>
            </collectionProp>
            <collectionProp name="-293892350">
              <stringProp name="1940041876">${__P(start_rps36,)}</stringProp>
              <stringProp name="-250819589">${__P(end_rps36,)}</stringProp>
              <stringProp name="1732887962">${__P(duration36,)}</stringProp>
            </collectionProp>
            <collectionProp name="564314688">
              <stringProp name="1940071667">${__P(start_rps37,)}</stringProp>
              <stringProp name="-250789798">${__P(end_rps37,)}</stringProp>
              <stringProp name="1732917753">${__P(duration37,)}</stringProp>
            </collectionProp>
            <collectionProp name="317055358">
              <stringProp name="1940101458">${__P(start_rps38,)}</stringProp>
              <stringProp name="-250760007">${__P(end_rps38,)}</stringProp>
              <stringProp name="1732947544">${__P(duration38,)}</stringProp>
            </collectionProp>
            <collectionProp name="1227700426">
              <stringProp name="1940131249">${__P(start_rps39,)}</stringProp>
              <stringProp name="-250730216">${__P(end_rps39,)}</stringProp>
              <stringProp name="1732977335">${__P(duration39,)}</stringProp>
            </collectionProp>
            <collectionProp name="1661932637">
              <stringProp name="1940786651">${__P(start_rps40,)}</stringProp>
              <stringProp name="-250074814">${__P(end_rps40,)}</stringProp>
              <stringProp name="1733632737">${__P(duration40,)}</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - SUCESS">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="ResultCollector.success_only_logging">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree - FAIL" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree -ALL" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
