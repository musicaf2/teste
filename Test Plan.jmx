<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="17. Cenario varias request para completar 1 jornada (Transação) TPS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">125</stringProp>
        <stringProp name="ThreadGroup.ramp_time">125</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.1 POST Criar Pedido 1" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,1024)}</stringProp>
            <stringProp name="CONNECT">${__Random(100,250)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99999,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = ID;
//tratativa se tiver algum campo null ou em branco nao salvar no csv
if(ID == null || ID.equals(&quot;&quot;)) {
	return jsonOutput;
}

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\ID.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(linha);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="113879">sim</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;

// Define the variables to be saved in the CSV file
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
// Tratativa: if the ID variable is null or empty, do not save it in the CSV file
if (ID == null || ID.isEmpty()) {
    return jsonOutput;
}

// Create the line to be written to the CSV file
String linha = ID;

// Open or create the CSV file
synchronized (this) {
    FileWriter fileWriter = null;
    BufferedWriter bufferedWriter = null;

    try {
        fileWriter = new FileWriter(scriptHome + &quot;\\ID.csv&quot;, true);
        bufferedWriter = new BufferedWriter(fileWriter);

        // Write the line to the file and append a newline character
        bufferedWriter.write(linha);
        bufferedWriter.newLine();
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (bufferedWriter != null) {
            try {
                bufferedWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (fileWriter != null) {
            try {
                fileWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

// Return the jsonOutput variable to the next element in the test plan
return jsonOutput;
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.2 POST Criar Pedido 2" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(1000,2000)}</stringProp>
            <stringProp name="LATENCY">${__Random(1000,2000)}</stringProp>
            <stringProp name="CONNECT">${__Random(0,0)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99999,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = ID;
//tratativa se tiver algum campo null ou em branco nao salvar no csv
if(ID == null || ID.equals(&quot;&quot;)) {
	return jsonOutput;
}

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\ID.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(linha);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="113879">sim</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;

// Define the variables to be saved in the CSV file
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
// Tratativa: if the ID variable is null or empty, do not save it in the CSV file
if (ID == null || ID.isEmpty()) {
    return jsonOutput;
}

// Create the line to be written to the CSV file
String linha = ID;

// Open or create the CSV file
synchronized (this) {
    FileWriter fileWriter = null;
    BufferedWriter bufferedWriter = null;

    try {
        fileWriter = new FileWriter(scriptHome + &quot;\\ID.csv&quot;, true);
        bufferedWriter = new BufferedWriter(fileWriter);

        // Write the line to the file and append a newline character
        bufferedWriter.write(linha);
        bufferedWriter.newLine();
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (bufferedWriter != null) {
            try {
                bufferedWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (fileWriter != null) {
            try {
                fileWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

// Return the jsonOutput variable to the next element in the test plan
return jsonOutput;
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="1.3 POST Criar Pedido 3" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__Random(1,10,number)}</stringProp>
          </LoopController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.3 POST Criar Pedido 3" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(200,700)}</stringProp>
              <stringProp name="LATENCY">${__Random(200,700)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__Random(1,99999,)}</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">petId</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = ID;
//tratativa se tiver algum campo null ou em branco nao salvar no csv
if(ID == null || ID.equals(&quot;&quot;)) {
	return jsonOutput;
}

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\ID.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(linha);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="113879">sim</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;

// Define the variables to be saved in the CSV file
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
// Tratativa: if the ID variable is null or empty, do not save it in the CSV file
if (ID == null || ID.isEmpty()) {
    return jsonOutput;
}

// Create the line to be written to the CSV file
String linha = ID;

// Open or create the CSV file
synchronized (this) {
    FileWriter fileWriter = null;
    BufferedWriter bufferedWriter = null;

    try {
        fileWriter = new FileWriter(scriptHome + &quot;\\ID.csv&quot;, true);
        bufferedWriter = new BufferedWriter(fileWriter);

        // Write the line to the file and append a newline character
        bufferedWriter.write(linha);
        bufferedWriter.newLine();
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (bufferedWriter != null) {
            try {
                bufferedWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (fileWriter != null) {
            try {
                fileWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

// Return the jsonOutput variable to the next element in the test plan
return jsonOutput;
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.4 POST Criar Pedido 4" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(1000,2000)}</stringProp>
            <stringProp name="LATENCY">${__Random(1000,2000)}</stringProp>
            <stringProp name="CONNECT">${__Random(0,0)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99999,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = ID;
//tratativa se tiver algum campo null ou em branco nao salvar no csv
if(ID == null || ID.equals(&quot;&quot;)) {
	return jsonOutput;
}

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\ID.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(linha);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="113879">sim</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;

// Define the variables to be saved in the CSV file
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
// Tratativa: if the ID variable is null or empty, do not save it in the CSV file
if (ID == null || ID.isEmpty()) {
    return jsonOutput;
}

// Create the line to be written to the CSV file
String linha = ID;

// Open or create the CSV file
synchronized (this) {
    FileWriter fileWriter = null;
    BufferedWriter bufferedWriter = null;

    try {
        fileWriter = new FileWriter(scriptHome + &quot;\\ID.csv&quot;, true);
        bufferedWriter = new BufferedWriter(fileWriter);

        // Write the line to the file and append a newline character
        bufferedWriter.write(linha);
        bufferedWriter.newLine();
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (bufferedWriter != null) {
            try {
                bufferedWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (fileWriter != null) {
            try {
                fileWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

// Return the jsonOutput variable to the next element in the test plan
return jsonOutput;
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <stringProp name="TestPlan.comments">fazer calculo RPS desejado(5) X 60 e preencher no hits, ex RPSdesejado 5x60= 300, sempre deixar no grupos de usuarios o numero de VUser suficientes ou sempre a mais para o RPS</stringProp>
          <intProp name="calcMode">3</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>120.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="Controlador_de_RPS" enabled="false">
          <collectionProp name="load_profile">
            <collectionProp name="1951186188">
              <stringProp name="50">2</stringProp>
              <stringProp name="50">2</stringProp>
              <stringProp name="50547">300</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
