${__groovy(props.get("time_waiting_token_"), tempo_limite)}
${__groovy(log.info("--------->: Token expira em: " + props.get("tempo_limite_formatado")),)}
${__groovy(log.info("First User: " + String.valueOf(ctx.getThreadNum() == 0)),)}
${__groovy(
	if(vars.get("tempo_limite") == ""){
		log.info("O token é nulo!!")
	} else {
		log.info("Já expirou: " + String.valueOf(System.currentTimeMillis() > Long.valueOf(vars.get("tempo_limite"))))
	}
,)}
${__groovy(
	if(ctx.getThreadNum() == 0){
		if(vars.get("tempo_limite") == ""){
			true
		} else {
			System.currentTimeMillis() > Long.valueOf(vars.get("tempo_limite"))
		}
	} else {
		false
	}
,)}


props.put('access_token', vars.get('access_token'))
props.put('status_code', vars.get('status_code'))

def tempo_limite = "${__timeShift(,,PT260s,,)}"
def variavel = 'time_waiting_token_'
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone('UTC-3')
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format("dd/MM/yyyy HH:mm:ss.SSS")
props.put("tempo_limite_formatado", formatado)
log.info('------->: Token ' + variavel + ' : Expira -> epoch: ' + props.get(variavel) + ' Data: ' + formatado, tmz)
