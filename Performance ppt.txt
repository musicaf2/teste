// Get user-defined variables
def disableTransactions = vars.get("disableTransactions") ?: ""
String[] disableTransactionsArray = disableTransactions.split(";")
List<String> disableTransactionsList = Arrays.asList(disableTransactionsArray)

def maxSteps = 40 // Same as the total number of steps set in Throughput Shaping Timer

// Define weight mappings
def weightMappings = [
    '1transaction_weight': 100,
    '2transaction_weight': 100,
    '3transaction_weight': 30,
    '4transaction_weight': 100, // Keep this fixed even if disabled
    '5transaction_weight': 10,
    '6transaction_weight': 10,
    '7transaction_weight': 10,
    '8transaction_weight': 30,
    '9transaction_weight': 10,
    '10transaction_weight': 30,
    '11transaction_weight': 100,
    '12transaction_weight': 15,
    '13transaction_weight': 40,
    '14transaction_weight': 40,
]

// Define request mappings
def requestMappings = [
    '1transaction_weight': 11,
    '2transaction_weight': 12,
    '3transaction_weight': 1.3,
    '4transaction_weight': 8,
    '5transaction_weight': 2,
    '6transaction_weight': 5,
    '7transaction_weight': 4,
    '8transaction_weight': 3,
    '9transaction_weight': 3,
    '10transaction_weight': 1,
    '11transaction_weight': 4,
    '12transaction_weight': 2,
    '13transaction_weight': 7,
    '14transaction_weight': 1
]

def weightRequest = 0
def weightSum = 0

// Adjust weights dynamically based on `disableTransactions`
weightMappings.each { key, value ->
    def transactionId = key.replace("transaction_weight", "")
    if (!disableTransactionsList.contains(transactionId)) {
        weightRequest += value * requestMappings[key]
        weightSum += value
    } else {
        weightMappings[key] = 0 // Set weight to 0 for disabled transactions
    }
}

// Expected number of bookings per hour
def SLATargetPerHour = Integer.parseInt(vars.get("SLATargetPerHour"))

// Calculate booking-to-overall ratio, adjusting for whether SLA (4transaction_weight) is disabled
def SLATargetWeight = weightMappings['4transaction_weight'] // This will be the Main Transaction for SLA reference
def SLATargetRequest = requestMappings['4transaction_weight'] // This will be the Main Transaction for SLA reference

// If SLA (4transaction_weight) is not disabled, calculate its influence on the load, else ignore it in SLATargetToOverall
def SLATargetToOverall = 1
if (SLATargetWeight > 0 && SLATargetRequest > 0) {
    SLATargetToOverall = weightRequest / (SLATargetWeight * SLATargetRequest) // Ensure no division by zero
}

// Calculate `normalLoad` based on the remaining weight (after disabling transactions)
def normalLoad = 0
if (weightSum > 0) {
    // Calculate the normal load, considering whether SLA (4transaction_weight) is disabled or not
    if (SLATargetWeight > 0 && SLATargetRequest > 0) {
        normalLoad = (((SLATargetPerHour / 3600) * weightRequest / weightSum) * SLATargetToOverall * 1.15) // the * 1.15 is a extra to reach target
    } else {
        // When SLA is disabled, calculate based only on the remaining weights
        normalLoad = (((SLATargetPerHour / 3600) * weightRequest / weightSum) * 1.15) // the * 1.15 is a extra to reach target
    }
}

// Update weight mappings in JMeter context
weightMappings.each { key, value ->
    props.setProperty(key, value.toString())
}

log.info("disableTransactions: {}", disableTransactionsList)
log.info("normalLoad: {}", normalLoad)
log.info("SLATargetPerHour: {}", SLATargetPerHour)
log.info("weightRequest: {}", weightRequest)
log.info("weightSum: {}", weightSum)
log.info("requestMappings['4transaction_weight']: {}", requestMappings['4transaction_weight'])
log.info("weightMappings: {}", weightMappings)

def profile
def duration
def typeTest = vars.get("typeTest")

// 4000/3600 * 3390 / 420 * 8 = 71.74
// def normalLoad = ((bookingsPerHour/3600) * weightRequest / weightSum) * requestMappings['4targetTab_weight'] * dashboardWeight

switch (typeTest) {
	case "performance":
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/ numOfRamps

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad,		rampUp],
			[normalLoad,   	normalLoad,		stepDuration]
		  ]
		break

	case "load":
		def numOfRamps = 4
		def rampUp = 60
		duration = 60 * 60 * 1 // sec * min * hour
		def stepDuration = Math.round(duration/numOfRamps - rampUp)

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 0.25,	rampUp],
			[normalLoad * 0.25,	normalLoad * 0.25,	stepDuration],
			[normalLoad * 0.25,	normalLoad * 0.5,	rampUp],
			[normalLoad * 0.5,	normalLoad * 0.5,	stepDuration],
			[normalLoad * 0.5,	normalLoad * 0.75,  rampUp],
			[normalLoad * 0.75,	normalLoad * 0.75,	stepDuration],
			[normalLoad * 0.75,	normalLoad * 1,	rampUp],
			[normalLoad * 1,	normalLoad * 1,	stepDuration]
		  ]
		break

	case "stress":
		def numOfRamps = 20
		def rampUp = 60		
		def stepDuration = 180
		duration = 60 * 60 * 1.5 // last step duration
		def finalDuration = 60 * 13

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 2,  	rampUp],
			[normalLoad * 2,	normalLoad * 2,  	stepDuration],
			[normalLoad * 2,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 4,  	rampUp],
			[normalLoad * 4,	normalLoad * 4,  	stepDuration],
			[normalLoad * 4,	normalLoad * 5,  	rampUp],
			[normalLoad * 5,	normalLoad * 5,  	stepDuration],
			[normalLoad * 5,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[normalLoad * 6,	normalLoad * 7,  	rampUp],
			[normalLoad * 7,	normalLoad * 7,  	stepDuration],
			[normalLoad * 7,	normalLoad * 8,  	rampUp],
			[normalLoad * 8,	normalLoad * 8,  	stepDuration],
			[normalLoad * 8,	normalLoad * 9,  	rampUp],
			[normalLoad * 9,	normalLoad * 9,  	stepDuration],
			[normalLoad * 9,	normalLoad * 10,  	rampUp],
			[normalLoad * 10,	normalLoad * 10,  	stepDuration],
			[normalLoad * 10,	normalLoad * 11,  	rampUp],
			[normalLoad * 11,	normalLoad * 11,  	stepDuration],
			[normalLoad * 11,	normalLoad * 12,  	rampUp],
			[normalLoad * 12,	normalLoad * 12,  	stepDuration],
			[normalLoad * 12,	normalLoad * 13,  	rampUp],
			[normalLoad * 13,	normalLoad * 13,  	stepDuration],
			[normalLoad * 13,	normalLoad * 14,  	rampUp],
			[normalLoad * 14,	normalLoad * 14,  	stepDuration],
			[normalLoad * 14,	normalLoad * 15,  	rampUp],
			[normalLoad * 15,	normalLoad * 15,  	stepDuration],
			[normalLoad * 15,	normalLoad * 16,  	rampUp],
			[normalLoad * 16,	normalLoad * 16,  	stepDuration],
			[normalLoad * 16,	normalLoad * 17,  	rampUp],
			[normalLoad * 17,	normalLoad * 17,  	stepDuration],
			[normalLoad * 17,	normalLoad * 18,  	rampUp],
			[normalLoad * 18,	normalLoad * 18,  	stepDuration],
			[normalLoad * 18,	normalLoad * 19,  	rampUp],
			[normalLoad * 19,	normalLoad * 19,  	stepDuration],
			[normalLoad * 19,	normalLoad * 20,  	rampUp],
			[normalLoad * 20,	normalLoad * 20,  	finalDuration]
		  ]
		break

	case "spike":
		def numOfRamps = 4
		def rampUp = 60 //sec
		duration = 60 * 60 * 1.5 // sec * min * hour
		def postMonitoringDuration = 60 * 30 //sec * min
		def stepDuration = Math.round((duration - postMonitoringDuration)/numOfRamps - rampUp)
		  // 5 minutes or whatever you intend

		profile = [
			//start_rps		end_rps			duration
			[1,				normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 3,  	rampUp],
			[normalLoad * 3,	normalLoad * 3,  	stepDuration],
			[normalLoad * 3,	normalLoad * 1,  	rampUp],
			[normalLoad * 1,	normalLoad * 1,  	stepDuration],
			[normalLoad * 1,	normalLoad * 6,  	rampUp],
			[normalLoad * 6,	normalLoad * 6,  	stepDuration],
			[1,				1,				postMonitoringDuration]
		  ]
		break

	case "endurance":
		def numOfRamps = 1
		def rampUp = 300
		duration = 60 * 60 * 8 // sec * min * hour
		def stepDuration = Math.round(duration - rampUp)/numOfRamps

		profile = [
			//start_rps			end_rps				duration
			[1,					normalLoad * 1,	  	rampUp],
			[normalLoad * 1,		normalLoad * 1,	  	stepDuration]
		  ]
		break
}

def nLines = profile.size()

for (int i=0; i< nLines ; i++){
	props.put("start_rps" + String.valueOf(i+1), String.valueOf(profile[i][0]))
	props.put("end_rps"   + String.valueOf(i+1), String.valueOf(profile[i][1]))
	props.put("duration"  + String.valueOf(i+1), String.valueOf(profile[i][2]))

	log.info("start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}",
	String.valueOf(i+1), String.valueOf(profile[i][0]),
	String.valueOf(i+1), String.valueOf(profile[i][1]),
	String.valueOf(i+1), String.valueOf(profile[i][2])
	)
}

for (int i=nLines; i< maxSteps ; i++){
	props.put("start_rps" + String.valueOf(i+1), "0")
	props.put("end_rps"   + String.valueOf(i+1), "0")
	props.put("duration"  + String.valueOf(i+1), "0")

	log.info("start_rps{}: {}\t\tend_rps{}: {}\t\tduration{}: {}",
	String.valueOf(i+1), props.get("start_rps" + String.valueOf(i+1)),
	String.valueOf(i+1), props.get("end_rps" + String.valueOf(i+1)),
	String.valueOf(i+1), props.get("duration" + String.valueOf(i+1))
	)
}
props.put("total_test_duration",String.valueOf(Math.round(duration)))	

log.info("test type: {}", typeTest)
log.info("total_test_duration: {}", props.get("total_test_duration"))

SampleResult.setIgnore();
--------
typeTest	${__P(typeTest,performance)}	performance,load,stress,spike,endurance this are the type available
SLATargetPerHour	${__P(SLATargetPerHour,4000)}	
disableTransactions	${__P(disableTransactions,)}	place the transaction number you want to disble separated by ";" Ex.: 2;3;4
BASE_URL_1	${__P(BASE_URL,token.preprod.net)}	
BASE_URL_2	${__P(BASE_URL,test.preprod.net)}	
counter	0	
currentDate	${__time(YYYY-MM-dd,)}	
territory	${__P(territory,CA\,US)}	when has "," it has to put  a "\" the original should be CA,US
renewSessionTime	300	
