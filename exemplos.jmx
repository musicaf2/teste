<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Plano de Teste" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variáveis Definidas Pelo Usuário" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="1.1 Limpa CSV" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Limpa CSV" enabled="true">
          <stringProp name="TestPlan.comments">faz limpeza do csv e reinsere cabeçalho com campos no documento</stringProp>
          <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// define as variaveis e o valor daas variaveis qque serao inseridas no csv..
String intA = &quot;intA&quot;;
String intB = &quot;intB&quot;;
String scriptHome = FileServer.getFileServer().getBaseDir();

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream(scriptHome + &quot;\\MassaCalculadora.csv&quot;, false);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(intA + &quot;;&quot; + intB);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;

///Os comandos abaixo são para eliminar dos logs o aparecimento dos samplers, so funciona para PRE e POS samplers
///SampleResult.setIgnore();
///prev.setIgnore();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Esse Pos prossessor é para ocultar o sampler da arvore de resultados" enabled="false">
            <stringProp name="TestPlan.comments">ative ou desative conforme a necessidade</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="1.2 Gera Massa teste" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">12</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">20</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Ger massa IntA" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,99,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;intA&quot;, Parameters);
vars.get(&quot;intA&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Ger massa IntB" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,99,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;intB&quot;, Parameters);
vars.get(&quot;intB&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Salva massa no CSV se tiver erro em branco ou null alguma variavel nao salva" enabled="true">
            <stringProp name="TestPlan.comments">faz limpeza do csv e reinsere cabeçalho com campos no documento</stringProp>
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String intA = vars.get(&quot;intA&quot;);
String intB = vars.get(&quot;intB&quot;);
String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = intA + &quot;;&quot; + intB;
//tratativa se tiver algum campo null ou em branco nao salvar no csv
if(intA == null || intA.equals(&quot;&quot;)) {
	return jsonOutput;
}
if(intB == null || intB.equals(&quot;&quot;)) {
	return jsonOutput;
}
// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\MassaCalculadora.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(linha);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Esse Pos prossessor é para ocultar o sampler da arvore de resultados" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Salva massa no CSV se tiver em branco alguma coluna na linha a variavel nao salva" enabled="false">
            <stringProp name="TestPlan.comments">faz limpeza do csv e reinsere cabeçalho com campos no documento</stringProp>
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String intA = vars.get(&quot;intA&quot;);
String intB = vars.get(&quot;intB&quot;);
String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = intA + &quot;;&quot; + intB;
//tratativa se tiver algum campo em branco nao salvar no csv
if(linha.indexOf(&quot;;;&quot;) == -1) {
	// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
	f = new FileOutputStream (scriptHome + &quot;\\MassaCalculadora.csv&quot;, true);
	p = new PrintStream(f);
	// insere o valor das variaveis no arquivo
	p.println(linha);
	// Fecha o arquivo
	p.close();f.close();
	// este verifica o codigo
	return jsonOutput;
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Esse Pos prossessor é para ocultar o sampler da arvore de resultados" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Salva massa no CSV" enabled="false">
            <stringProp name="TestPlan.comments">faz limpeza do csv e reinsere cabeçalho com campos no documento</stringProp>
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String intA = vars.get(&quot;intA&quot;);
String intB = vars.get(&quot;intB&quot;);
String scriptHome = FileServer.getFileServer().getBaseDir();
// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\MassaCalculadora.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(intA + &quot;;&quot; + intB);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;

///Os comandos abaixo são para eliminar dos logs o aparecimento dos samplers, so funciona para PRE e POS samplers
///SampleResult.setIgnore();
///prev.setIgnore();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Esse Pos prossessor é para ocultar o sampler da arvore de resultados" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="1.3 Teste com a massa gerada e salva" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">10</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Configuração dos dados CSV" enabled="true">
          <stringProp name="delimiter">;</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">MassaCalculadora.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">intA,intB</stringProp>
        </CSVDataSet>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01_Adicao" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="add" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:tem=&quot;http://tempuri.org/&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;tem:Add&gt;&#xd;
         &lt;tem:intA&gt;${intA}&lt;/tem:intA&gt;&#xd;
         &lt;tem:intB&gt;${intB}&lt;/tem:intB&gt;&#xd;
      &lt;/tem:Add&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.dneonline.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">calculator.asmx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1349890624">&lt;AddResult&gt;${result}&lt;/AddResult&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">result</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//AddResult</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02_Subtracao" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="subtract" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:tem=&quot;http://tempuri.org/&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;tem:Subtract&gt;&#xd;
         &lt;tem:intA&gt;${intA}&lt;/tem:intA&gt;&#xd;
         &lt;tem:intB&gt;${intB}&lt;/tem:intB&gt;&#xd;
      &lt;/tem:Subtract&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.dneonline.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">calculator.asmx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1560252642">&lt;SubtractResult&gt;${result}&lt;/SubtractResult&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">result</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//SubtractResult</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="03_Multiplicao" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="multiply" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:tem=&quot;http://tempuri.org/&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;tem:Multiply&gt;&#xd;
         &lt;tem:intA&gt;${intA}&lt;/tem:intA&gt;&#xd;
         &lt;tem:intB&gt;${intB}&lt;/tem:intB&gt;&#xd;
      &lt;/tem:Multiply&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.dneonline.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">calculator.asmx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1633585858">&lt;MultiplyResult&gt;${result}&lt;/MultiplyResult&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">result</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//MultiplyResult</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="04_Divisao" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="divide" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:tem=&quot;http://tempuri.org/&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;tem:Divide&gt;&#xd;
         &lt;tem:intA&gt;${intA}&lt;/tem:intA&gt;&#xd;
         &lt;tem:intB&gt;${intB}&lt;/tem:intB&gt;&#xd;
      &lt;/tem:Divide&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">www.dneonline.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">calculator.asmx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1167466472">&lt;DivideResult&gt;${result}&lt;/DivideResult&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="XPath Extractor" enabled="true">
              <stringProp name="XPathExtractor.default"></stringProp>
              <stringProp name="XPathExtractor.refname">result</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">//DivideResult</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="2. EX base64" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="testando base64" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${body_base_64}&#xd;
${body_decrypted}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">www.dneonline.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">calculator.asmx</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">para validar copie o trancode gerado no request e cole no site www.jwt.io para decriptar</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;

String data = &apos;${__timeShift(yyyy-MM-dd,,,,)}&apos;;
/// string Json vai ser a variavel que vai virar base64
String json = &apos;{&quot;data&quot;: {&quot;mensagem&quot;:&quot;essaStringVaiIrParBase64naData#DATA#&quot;}}&apos;;
// exemplo que busca na string #DATA# e da um replace com o timestamp gerado acima
json = json.replace(&apos;#DATA#&apos;, data);
// transforma para base64 e salva na variavel
byte[] encryptedUid = Base64.encodeBase64(json.getBytes());
vars.put(&quot;body_base_64&quot;,new String(encryptedUid));

</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
import groovy.json.JsonSlurper;

prev.setDataEncoding(&quot;UTF-8&quot;);
String response = prev.getResponseDataString();

String decodedString =  new String(Base64.decodeBase64(response.split(&quot;\\.&quot;)[]1].getBytes()));

String consentId = com.jayway.jsonPath.read(decodedString, &apos;$..consentId&apos;).get(0).toString();

vars.put(&quot;consent_id&quot;, consentId.split(&quot;:&quot;)[2]);
vars.put(&quot;consentId&quot;, consentId);</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="3. Ex embaralhar variaveis para nunca repetir num body" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">40</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="exemplo com a massa no proprio sampler como Parameter" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${massa1}&#xd;
${massa2}&#xd;
${massa3}&#xd;
${massa4}&#xd;
${massa5}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">1,2,3,4,5</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">// vai pegar as 5 variaveis no campo acima Parameters, que estao separados por virgulas e salvar elas em uma string
vars.put(&quot;massa&quot;,Parameters);
// SampleResult.setIgnore(); serve para não mostrar no resultado dos testes o que esta fazendo aqui no processo


//Aqui vai pegar a string inteira &quot;massa&quot; dividir em variaveis
String massa = vars.get(&quot;massa&quot;);

List&lt;String&gt; stringArray = Arrays.asList(massa.split(&quot;,&quot;));

Collections.shuffle(stringArray);

vars.put(&quot;massa1&quot;, stringArray.get(0));
vars.put(&quot;massa2&quot;, stringArray.get(1));
vars.put(&quot;massa3&quot;, stringArray.get(2));
vars.put(&quot;massa4&quot;, stringArray.get(3));
vars.put(&quot;massa5&quot;, stringArray.get(4));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="exemplo com as massas predefinidas pelo usuario" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${massa1}&#xd;
${massa2}&#xd;
${massa3}&#xd;
${massa4}&#xd;
${massa5}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="massa01" elementType="Argument">
                <stringProp name="Argument.name">massa01</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="massa02" elementType="Argument">
                <stringProp name="Argument.name">massa02</stringProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="massa03" elementType="Argument">
                <stringProp name="Argument.name">massa03</stringProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="massa04" elementType="Argument">
                <stringProp name="Argument.name">massa04</stringProp>
                <stringProp name="Argument.value">4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="massa05" elementType="Argument">
                <stringProp name="Argument.name">massa05</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${massa01},${massa02},${massa03},${massa04},${massa05}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">// vai pegar as 5 variaveis no campo acima Parameters, que estao separados por virgulas e salvar elas em uma string
vars.put(&quot;massa&quot;,Parameters);
// SampleResult.setIgnore(); serve para não mostrar no resultado dos testes o que esta fazendo aqui no processo


//Aqui vai pegar a string inteira &quot;massa&quot; dividir em variaveis
String massa = vars.get(&quot;massa&quot;);

List&lt;String&gt; stringArray = Arrays.asList(massa.split(&quot;,&quot;));

Collections.shuffle(stringArray);

vars.put(&quot;massa1&quot;, stringArray.get(0));
vars.put(&quot;massa2&quot;, stringArray.get(1));
vars.put(&quot;massa3&quot;, stringArray.get(2));
vars.put(&quot;massa4&quot;, stringArray.get(3));
vars.put(&quot;massa5&quot;, stringArray.get(4));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="exemplo com as massas predefinidas pelo usuario" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${massa1}&#xd;
${massa2}&#xd;
${massa3}&#xd;
${massa4}&#xd;
${massa5}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="massa1" enabled="true">
            <stringProp name="filename">massas/Massa1.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">massa1</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">;</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="massa2" enabled="true">
            <stringProp name="filename">massas/Massa2.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">massa2</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">;</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="massa3" enabled="true">
            <stringProp name="filename">massas/Massa3.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">massa3</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">;</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="massa4" enabled="true">
            <stringProp name="filename">massas/Massa4.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">massa4</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">;</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="massa5" enabled="true">
            <stringProp name="filename">massas/Massa5.csv</stringProp>
            <stringProp name="fileEncoding">UTF-8</stringProp>
            <stringProp name="variableNames">massa5</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">;</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${massa1},${massa2},${massa3},${massa4},${massa5}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">// vai pegar as 5 variaveis no campo acima Parameters, que estao separados por virgulas e salvar elas em uma string
vars.put(&quot;massa&quot;,Parameters);
// SampleResult.setIgnore(); serve para não mostrar no resultado dos testes o que esta fazendo aqui no processo


//Aqui vai pegar a string inteira &quot;massa&quot; dividir em variaveis
String massa = vars.get(&quot;massa&quot;);

List&lt;String&gt; stringArray = Arrays.asList(massa.split(&quot;,&quot;));

Collections.shuffle(stringArray);

vars.put(&quot;massa1&quot;, stringArray.get(0));
vars.put(&quot;massa2&quot;, stringArray.get(1));
vars.put(&quot;massa3&quot;, stringArray.get(2));
vars.put(&quot;massa4&quot;, stringArray.get(3));
vars.put(&quot;massa5&quot;, stringArray.get(4));</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="4. fazer Regex  mainframe fila MQ" enabled="false">
        <stringProp name="TestPlan.comments">encontrar palavras em um documneto de texto e substituir</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import. p4all.ims.PjTcpIms;

String[] args = {&quot;${Computador}&quot;, &quot;${Porta}&quot;, &quot;${Ambiente}&quot;, &quot;${Transacao}&quot;, &quot;${Usuario}&quot;, &quot;${Senha}&quot;, &quot;${Envio}&quot;};

PjTcpIms</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="variaveis conectar mainframe" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="Porta" elementType="Argument">
                <stringProp name="Argument.name">Porta</stringProp>
                <stringProp name="Argument.value">16010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Computador" elementType="Argument">
                <stringProp name="Argument.name">Computador</stringProp>
                <stringProp name="Argument.value">DESKTOPxS109</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Ambiente" elementType="Argument">
                <stringProp name="Argument.name">Ambiente</stringProp>
                <stringProp name="Argument.value">IMST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Transacao" elementType="Argument">
                <stringProp name="Argument.name">Transacao</stringProp>
                <stringProp name="Argument.value">H88FIQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Usuario" elementType="Argument">
                <stringProp name="Argument.name">Usuario</stringProp>
                <stringProp name="Argument.value">Admin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="Senha" elementType="Argument">
                <stringProp name="Argument.name">Senha</stringProp>
                <stringProp name="Argument.value">012345</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">Envio,RESP</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">//Captura a resposta atual do servidor
String responsta = SampleResult.getResponseDataAsString();
log.info(&quot; RespMain : &quot; + resposta);

//Captura a resposta na posição que contem a descrição do erro
String validaResposta = resposta.substring(139,206);
log.info (&quot;Resposta capturada: &quot; + validaResposta);

if (!validaResposta.trim().equals(&quot;&quot;)) {
	// trata a resposta de forma posicional pos inicio: 74 e pos final 100 trocando por x e substitui a resposta do servidaor(Timestamp)
	SampleResult.setResponseData(resposta.replace(resposta.substing(74,100), &quot;XXXXXXXXXXXXXXXXXXXXXXXX&quot;), &quot;utf-8&quot;);
	String RESP1 = SampleResult.getResponseDataAsString();
	// trata a resposta de forma posicional pos inicio: 206 e pos final 243 trocando por X e substitui a resposta do servidor (Timestamp)
	SampleResult.setResponseData(RESP1.replace(resposta.substing(206,243), &quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;), &quot;utf-8&quot;);
	String RESP2 = SampleResult.getResponseDataAsString();
	
} else {
	//trata a resposta de forma posicional pos inicio: 74 e pos final 100 trocando por X e substitui va resposta do servidor
	SampleResult.setResponseData(resposta.replace(resposta.substring(74,100), &quot;XXXXXXXXXXXXXXXXXXXXXXXX&quot;), &quot;utf-8&quot;);
	// print nova resposta
	String RESP1 = SampleResult.getResponseDataAsString();
	//log.info(&quot;RespostaTratada : &quot; + RESP1);
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1189646390">${RESP}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="5. Ex Controlar RPS" enabled="false">
        <stringProp name="TestPlan.comments">controla rps do teste em andamento remotamente sem necessidade de parar o teste</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">20</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01_Criar Pedido" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Criar Pedido" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: 1,&#xd;
  &quot;petId&quot;: 1,&#xd;
  &quot;quantity&quot;: 1,&#xd;
  &quot;shipDate&quot;: &quot;2021-03-15T18:34:11.429Z&quot;,&#xd;
  &quot;status&quot;: &quot;placed&quot;,&#xd;
  &quot;complete&quot;: true&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">petstore.swagger.io</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/store/order</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-359911329">complete&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02_Pesquisar Pedido" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pesquisar Pedido" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">petstore.swagger.io</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/store/order/${id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="126937286">complete&quot;:tru</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="03_Excluir Pedido" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Excluir Pedido" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">petstore.swagger.io</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/store/order/${id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1500059493">&quot;code&quot;:200,&quot;type&quot;:&quot;unknown</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <stringProp name="TestPlan.comments">fazer calculo RPS desejado(5) X 60 e preencher no hits, ex RPSdesejado 5x60= 300, sempre deixar no grupos de usuarios o numero de VUser suficientes ou sempre a mais para o RPS</stringProp>
          <intProp name="calcMode">3</intProp>
          <stringProp name="throughput">${__P(hits,300)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="6. Ex Controlar Tempo entre Requests" enabled="false">
        <stringProp name="TestPlan.comments">o botato delay thread creation é para manipular as treads para grandes quantidades de carga</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">30</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01_Criar Pedido" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Criar Pedido" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: 1,&#xd;
  &quot;petId&quot;: 1,&#xd;
  &quot;quantity&quot;: 1,&#xd;
  &quot;shipDate&quot;: &quot;2021-03-15T18:34:11.429Z&quot;,&#xd;
  &quot;status&quot;: &quot;placed&quot;,&#xd;
  &quot;complete&quot;: true&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">petstore.swagger.io</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/store/order</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-359911329">complete&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02_Pesquisar Pedido" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pesquisar Pedido" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">petstore.swagger.io</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/store/order/${id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="126937286">complete&quot;:tru</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="TestPlan.comments">controla Tempo entre Requests ideal para fluxos assincronos, quando uma aplicação tem kafka que demora retornar no topco ou tem time-out 1s=1000ms</stringProp>
            <stringProp name="ConstantTimer.delay">10000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="03_Excluir Pedido" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Excluir Pedido" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">petstore.swagger.io</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v2/store/order/${id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1500059493">&quot;code&quot;:200,&quot;type&quot;:&quot;unknown</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="7. Controlar RPS e threads dinamicamente gerenciados de acordo com o RPS " enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${__tstFeedback(Controlador_de_RPS,1,200,5)}</stringProp>
        <stringProp name="RampUp"></stringProp>
        <stringProp name="Steps"></stringProp>
        <stringProp name="Hold">300</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
        <stringProp name="TestPlan.comments">controlar remotamente via cmd o RPS</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="01. Criar Pedido" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

[no cookies]</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
          <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
          <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
          <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          <stringProp name="TestPlan.comments">cenario positivo</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,99,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">petId</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(499) + 1;
String complete = &quot;&quot;;

if (count == 499) {
    vars.put(&quot;complete&quot;, &quot;não&quot;);
} else {
    vars.put(&quot;complete&quot;, &quot;sim&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="113879">sim</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body TRUE" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;sim&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="02. Confirmar Pedido" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${timestamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Temporizador Constante" enabled="true">
              <stringProp name="ConstantTimer.delay">30</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body FALSE" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;não&quot; || &quot;${complete}&quot; == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="02. Confirmar Pedido" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${timestamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{
  &quot;id&quot;: ${ID},
&quot;Seu Pedido foi rejeitado, entre em contato com a Central de Atendimento
}
</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Temporizador Constante" enabled="true">
              <stringProp name="ConstantTimer.delay">30</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="Controlador_de_RPS" enabled="true">
          <collectionProp name="load_profile">
            <collectionProp name="-1898484831">
              <stringProp name="-1411915575">${__P(hits,2)}</stringProp>
              <stringProp name="-1411915575">${__P(hits,2)}</stringProp>
              <stringProp name="54395385">99999</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="8. Usar mock para simular testes localmente" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="01. Criar Pedido" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${Qt},
  &quot;shipDate&quot;: &quot;${time_stamp}&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: true
}


[no cookies]</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${time_stamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:true}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
          <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
          <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
          <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor time_stamp" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,)}Z</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;time_stamp&quot;, Parameters);
vars.get(&quot;time_stamp&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,99,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor petId" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,99,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;petId&quot;, Parameters);
vars.get(&quot;petId&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor Qt" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,5,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;Qt&quot;, Parameters);
vars.get(&quot;Qt&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="02. Pesquisar Pedido" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">GET https://petstore.swagger.io/v2/store/order/1

GET data:



[no cookies]
</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${time_stamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:true}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(100,200,)}</stringProp>
          <stringProp name="LATENCY">${__Random(100,200,)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5,)}</stringProp>
          <stringProp name="URL">GET https://petstore.swagger.io/v2/store/order/1</stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="9. Usando condicional com Mock" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor time_stamp" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,)}Z</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">String[] params = Parameters
vars.put(&quot;time_stamp&quot;, Parameters);
vars.get(&quot;time_stamp&quot;)</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${__Random(1,99,)}</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor petId" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${__Random(1,99,)}</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">String[] params = Parameters
vars.put(&quot;petId&quot;, Parameters);
vars.get(&quot;petId&quot;)</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor Qt" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters">${__Random(1,5,)}</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">String[] params = Parameters
vars.put(&quot;Qt&quot;, Parameters);
vars.get(&quot;Qt&quot;)</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="01. Criar Pedido Loop Controller " enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="TestPlan.comments">simular requisicoes ok para ttestar modulo condicional</stringProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </LoopController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="01. Criar Pedido" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${Qt},
  &quot;shipDate&quot;: &quot;${time_stamp}&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: true
}


[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${time_stamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:true}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Valisdar Status True JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.complete</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="false">
              <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
              <stringProp name="BoundaryExtractor.refname"></stringProp>
              <stringProp name="BoundaryExtractor.lboundary"></stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default"></stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number"></stringProp>
            </BoundaryExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="01. Criar Pedido" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${Qt},
  &quot;shipDate&quot;: &quot;${time_stamp}&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: true
}


[no cookies]</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${time_stamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:false}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
          <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
          <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
          <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Valisdar Status True JSON Assertion" enabled="false">
            <stringProp name="JSON_PATH">$.complete</stringProp>
            <stringProp name="EXPECTED_VALUE">true</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body TRUE" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="02. Criar Confirmacao Pedido" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${time_stamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;shipDate&quot;:&quot;${time_stamp}&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body FALSE" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;false&quot; || &quot;${complete}&quot; == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="02. Criar Confirmacao Pedido" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${time_stamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;shipDate&quot;:&quot;${time_stamp}&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="10. Trabalhando com token e Jwt com RSA256" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Token JWT" enabled="true"/>
        <hashTree>
          <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="JWT_KEY" elementType="Argument">
                  <stringProp name="Argument.name">JWT_KEY</stringProp>
                  <stringProp name="Argument.value">{ &quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;John Doe&quot;, &quot;iat&quot;: 1516239022 }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="privateKey" elementType="Argument">
                  <stringProp name="Argument.name">privateKey</stringProp>
                  <stringProp name="Argument.value">eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9Cg==.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg==</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ExpiryTime" elementType="Argument">
                  <stringProp name="Argument.name">ExpiryTime</stringProp>
                  <stringProp name="Argument.value">3600</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="username" elementType="Argument">
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">{&quot;alg&quot;: &quot;HS256&quot;,&quot;typ&quot;: &quot;JWT&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="RSA_USING_SHA512" elementType="Argument">
                  <stringProp name="Argument.name">RSA_USING_SHA512</stringProp>
                  <stringProp name="Argument.value">RSA_USING_SHA256</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="classname">com.jmeter.perftalks.jwt.sampler.JWTSampler</stringProp>
          </JavaSampler>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="01. Token" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_assertion_type=urn%56RFBKSHF7765-assertion-WWsdfh9849ldh%hhdudl%99Ss+

[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;acess_token&quot;: &quot;${jwt}&quot;}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name"></stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor time_stamp" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import java.util.UUID;

public class JWTGenerator {
    public static void main(String[] args) throws Exception {
        //Base64-encoded private key
        String privateKeyBase64 = &quot;eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9Cg==.eyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg==&quot;;
        // Payload (claims)
        String payload = &quot;{ &quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;John Doe&quot;, &quot;iat&quot;: 1516239022 }&quot;;
        //JWT header claims
        String headerJson = &quot;{&quot;alg&quot;: &quot;HS256&quot;,&quot;typ&quot;: &quot;JWT&quot;}&quot;;
        //Create base64-encoded header and payload
        String headerPayload = new String(Base64.getUrlEncoder().encode(headerJson.getBytes())) + &quot;.&quot; + new String(Base64.getUrlEncoder().encode(payload.getBytes()));
        //Load private key from file
        byte[] privateKeyBytes = Base64.getMimeDecoder().decode(privateKeyBase64);
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
        PrivateKey privateKey = KeyFactory.getInstance(&quot;RSA&quot;).generatePrivate(keySpec);
        //Sign the JWT
        java.security.Signature signature = java.security.Signature.getInstance(&quot;SHA256withRSA&quot;);
        signature.initSign(privateKey);
        signature.update(headerPayload.getBytes());
        byte[] sign = signature.sign();
        String signatureBase64Url = Base64.getUrlEncoder().encodeToString(sign);
        //Combine all pieces to produce the signed JWT
        String signedJwt = headerPayload + &quot;.&quot; + signatureBase64Url;
        //Store the signed JWT into a JMETER variable
        log.info(payload)
        log.info(jwt)
    }
}
</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Valisdar Status True JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.complete</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Runtime Controller" enabled="true">
          <stringProp name="RunTime.seconds">60</stringProp>
        </RunTime>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor time_stamp" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,)}Z</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;time_stamp&quot;, Parameters);
vars.get(&quot;time_stamp&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,99,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor petId" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,99,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;petId&quot;, Parameters);
vars.get(&quot;petId&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor Qt" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,5,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;Qt&quot;, Parameters);
vars.get(&quot;Qt&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="01. Criar Pedido Loop Controller " enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="TestPlan.comments">simular requisicoes ok para ttestar modulo condicional</stringProp>
            <stringProp name="LoopController.loops">5</stringProp>
          </LoopController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="01. Criar Pedido" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${Qt},
  &quot;shipDate&quot;: &quot;${time_stamp}&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: true
}


[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${time_stamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:true}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Valisdar Status True JSON Assertion" enabled="false">
                <stringProp name="JSON_PATH">$.complete</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="false">
                <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
                <stringProp name="BoundaryExtractor.refname"></stringProp>
                <stringProp name="BoundaryExtractor.lboundary"></stringProp>
                <stringProp name="BoundaryExtractor.rboundary"></stringProp>
                <stringProp name="BoundaryExtractor.default"></stringProp>
                <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
                <stringProp name="BoundaryExtractor.match_number"></stringProp>
              </BoundaryExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="01. Criar Pedido" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${Qt},
  &quot;shipDate&quot;: &quot;${time_stamp}&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: true
}


[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${time_stamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:false}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Valisdar Status True JSON Assertion" enabled="false">
              <stringProp name="JSON_PATH">$.complete</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body TRUE" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;true&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="02. Criar Confirmacao Pedido" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${time_stamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;shipDate&quot;:&quot;${time_stamp}&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body FALSE" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;false&quot; || &quot;${complete}&quot; == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="02. Criar Confirmacao Pedido" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${time_stamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;shipDate&quot;:&quot;${time_stamp}&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="11.1 Gerar Token" enabled="false">
        <stringProp name="TestPlan.comments">gera token somente para o teste e executa ele 1x durante o tempo predeterminado</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="01. Token" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;eyJhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;YiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
          <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
          <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
          <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name"></stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">ERRO_TOKEN</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">${__setProperty(access_token,${access_token})}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">30000</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="11.2 Rodar Reqquisições" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="TestPlan.comments">vai rodar em paralelo com o grupo do token capturando o token quando necessario, economisando o stress do token</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <stringProp name="TargetLevel">${__tstFeedback(Controlador_de_RPS,1,200,10)}</stringProp>
        <stringProp name="RampUp"></stringProp>
        <stringProp name="Steps"></stringProp>
        <stringProp name="Hold">300</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="01. Criar Pedido" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__property(access_token)}
[no cookies]</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
          <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
          <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
          <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          <stringProp name="TestPlan.comments">cenario positivo</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__property(access_token)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,99,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">petId</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(999) + 1;
String complete = &quot;&quot;;

if (count == 999) {
    vars.put(&quot;complete&quot;, &quot;não&quot;);
} else {
    vars.put(&quot;complete&quot;, &quot;sim&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="113879">sim</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body &apos;não&apos;" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;não&quot; || &quot;${complete}&quot; == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="02. Confirmar Pedido" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${timestamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{
  &quot;id&quot;: ${ID},
&quot;Seu Pedido foi rejeitado, entre em contato com a Central de Atendimento
}
</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Temporizador Constante" enabled="true">
              <stringProp name="ConstantTimer.delay">30</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body &apos;sim&apos;" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;sim&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="02. Confirmar Pedido" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${timestamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Temporizador Constante" enabled="true">
              <stringProp name="ConstantTimer.delay">30</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <stringProp name="TestPlan.comments">fazer calculo RPS desejado(5) X 60 e preencher no hits, ex RPSdesejado 5x60= 300, sempre deixar no grupos de usuarios o numero de VUser suficientes ou sempre a mais para o RPS</stringProp>
          <intProp name="calcMode">3</intProp>
          <stringProp name="throughput">${__P(hits,300)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="Controlador_de_RPS" enabled="true">
          <collectionProp name="load_profile">
            <collectionProp name="1873354706">
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1722">60</stringProp>
            </collectionProp>
            <collectionProp name="-294433756">
              <stringProp name="1598">20</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="-259325884">
              <stringProp name="1691">50</stringProp>
              <stringProp name="1691">50</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="-296955420">
              <stringProp name="1572">15</stringProp>
              <stringProp name="1572">15</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="546599556">
              <stringProp name="48625">100</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="12. Gerar certificado Kcert" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import java.security.*
import java.io.*
import javax.security.auth.x500.X500Principal
import java.math.BigInteger
import java.security.cert.Certificate
import java.security.cert.CertificateFactory
import java.security.cert.X509Certificate
import java.util.Date
import org.apache.jmeter.services.FileServer;


def baseDir = FileServer.getFileServer().getBaseDir()
def keyStorePath = baseDir + &quot;/keystore.jks&quot;
def trustStorePath = baseDir + &quot;/truststore.jks&quot;
def keyStorePassword = &quot;changeit&quot;
def trustStorePassword = &quot;changeit&quot;
def alias = &quot;myalias&quot;

// Generate a self-signed certificate
def generateCertificate() {
    def keyPairGen = KeyPairGenerator.getInstance(&quot;RSA&quot;)
    keyPairGen.initialize(2048)
    def keyPair = keyPairGen.generateKeyPair()

    def certGen = Certificate.getInstance(&quot;X.509&quot;)
    certGen.setPublicKey(keyPair.getPublic())
    certGen.setIssuerDN(new X500Principal(&quot;CN=Test&quot;))
    certGen.setSubjectDN(new X500Principal(&quot;CN=Test&quot;))
    certGen.setNotBefore(new Date())
    certGen.setNotAfter(new Date(System.currentTimeMillis() + (365 * 24 * 60 * 60 * 1000L)))
    certGen.setSerialNumber(BigInteger.valueOf(System.currentTimeMillis()))
    certGen.sign(keyPair.getPrivate(), &quot;SHA256withRSA&quot;)

    certGen
}

// Generate the keystore
def generateKeyStore(cert, keyStorePath, keyStorePassword, alias) {
    def keyStore = KeyStore.getInstance(&quot;JKS&quot;)
    keyStore.load(null, null)
    keyStore.setKeyEntry(alias, keyPair.getPrivate(), keyStorePassword.toCharArray(), [cert].toArray())
    keyStore.store(new FileOutputStream(keyStorePath), keyStorePassword.toCharArray())
}

// Generate the truststore
def generateTrustStore(cert, trustStorePath, trustStorePassword, alias) {
    def trustStore = KeyStore.getInstance(&quot;JKS&quot;)
    trustStore.load(null, null)
    trustStore.setCertificateEntry(alias, cert)
    trustStore.store(new FileOutputStream(trustStorePath), trustStorePassword.toCharArray())
}

// Main execution
def cert = generateCertificate()
generateKeyStore(cert, keyStorePath, keyStorePassword, alias)
generateTrustStore(cert, trustStorePath, trustStorePassword, alias)
</stringProp>
        </JSR223Sampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the base directory and replace &quot;\&quot; with &quot;/&quot;
String baseDir = FileServer.getFileServer().getBaseDir().replaceAll(&quot;\\\\&quot;, &quot;/&quot;);

// Create the full file path
String keystore = baseDir;
String truststore = baseDir;

// Save the file path as a JMeter variable
vars.put(&quot;keystore&quot;, keystore);
vars.put(&quot;truststore&quot;, truststore);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="13. Limpa CSV e gera massa com counter e envia arquivo e Salva CSV" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Definir variáveis do teste" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="qt_massas" elementType="Argument">
              <stringProp name="Argument.name">qt_massas</stringProp>
              <stringProp name="Argument.value">50</stringProp>
              <stringProp name="Argument.desc">Insira aqui a quantidade de massas para o teste</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="nome_file" elementType="Argument">
              <stringProp name="Argument.name">nome_file</stringProp>
              <stringProp name="Argument.value">MassaCalculadora.csv</stringProp>
              <stringProp name="Argument.desc">Insira aqui o nome do arquivo que vai subir na requisição</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="0. Limpa CSV" enabled="true">
          <stringProp name="TestPlan.comments">Esse modulo faz executar 1x</stringProp>
        </OnceOnlyController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="0.1 Limpa CSV" enabled="true">
            <stringProp name="TestPlan.comments">faz limpeza do csv e reinsere cabeçalho com campos no documento</stringProp>
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor daas variaveis qque serao inseridas no csv..
String intA = &quot;intA&quot;;
String intB = &quot;intB&quot;;
String scriptHome = FileServer.getFileServer().getBaseDir();

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream(scriptHome + &quot;\\MassaCalculadora.csv&quot;, false);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(intA + &quot;;&quot; + intB);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;

///Os comandos abaixo são para eliminar dos logs o aparecimento dos samplers, so funciona para PRE e POS samplers
///SampleResult.setIgnore();
///prev.setIgnore();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Esse Pos prossessor é para ocultar o sampler da arvore de resultados" enabled="false">
              <stringProp name="TestPlan.comments">ative ou desative conforme a necessidade</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="1. Gerar massas Int A | B" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${qt_massas}</stringProp>
        </LoopController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="1.1 Ger massa IntA" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,99,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;intA&quot;, Parameters);
vars.get(&quot;intA&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="1.2 Ger massa IntB" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__Random(1,99,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">String[] params = Parameters
vars.put(&quot;intB&quot;, Parameters);
vars.get(&quot;intB&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="1.3 Salva massa no CSV se tiver erro em branco ou null alguma variavel nao salva" enabled="true">
            <stringProp name="TestPlan.comments">faz limpeza do csv e reinsere cabeçalho com campos no documento</stringProp>
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String intA = vars.get(&quot;intA&quot;);
String intB = vars.get(&quot;intB&quot;);
String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = intA + &quot;;&quot; + intB;
//tratativa se tiver algum campo null ou em branco nao salvar no csv
if(intA == null || intA.equals(&quot;&quot;)) {
	return jsonOutput;
}
if(intB == null || intB.equals(&quot;&quot;)) {
	return jsonOutput;
}
// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\MassaCalculadora.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(linha);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Esse Pos prossessor é para ocultar o sampler da arvore de resultados" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="2. Once Only Controller" enabled="true">
          <stringProp name="TestPlan.comments">Esse modulo faz executar 1x</stringProp>
        </OnceOnlyController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.1 Fazer envio de arquivo" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://the-internet.herokuapp.com/upload

Uploading a file from your local host:
${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}/${nome_file}</stringProp>
            <stringProp name="RESPONSE_DATA">File Uploaded!
${nome_file}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,500,)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,50,)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,5,)}</stringProp>
            <stringProp name="URL">POST https://the-internet.herokuapp.com/upload</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="14.Chamar token 1x dentro do mesmo threadgroup (consome muito CPU)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="0. Token" enabled="true">
          <stringProp name="IfController.condition">${__groovy(props.get(&quot;time_waiting_token_&quot;), tempo_limite)}
${__groovy(log.info(&quot;---------&gt;: Token expira em: &quot; + props.get(&quot;tempo_limite_formatado&quot;)),)}
${__groovy(log.info(&quot;First User: &quot; + String.valueOf(ctx.getThreadNum() == 0)),)}
${__groovy(
	if(vars.get(&quot;tempo_limite&quot;) == &quot;&quot;){
		log.info(&quot;O token é nulo!!&quot;)
	} else {
		log.info(&quot;Já expirou: &quot; + String.valueOf(System.currentTimeMillis() &gt; Long.valueOf(vars.get(&quot;tempo_limite&quot;))))
	}
,)}
${__groovy(
	if(ctx.getThreadNum() == 0){
		if(vars.get(&quot;tempo_limite&quot;) == &quot;&quot;){
			true
		} else {
			System.currentTimeMillis() &gt; Long.valueOf(vars.get(&quot;tempo_limite&quot;))
		}
	} else {
		false
	}
,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <stringProp name="TestPlan.comments">Esse modulo separa o token para ser chamado somente do thread 0 e o resto dos treads só consomem a variavel salva por ele</stringProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
            <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name"></stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
              <stringProp name="TestPlan.comments">Extrai o token</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(10) + 1;
String complete = &quot;&quot;;

if (count == 10) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__RandomString(22,ABDFHlkjggRTioo1234567890,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&quot;random&quot;,Parameters);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">status_code</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">props.put(&apos;access_token&apos;, vars.get(&apos;access_token&apos;))
props.put(&apos;status_code&apos;, vars.get(&apos;status_code&apos;))

def tempo_limite = &quot;${__timeShift(,,PT260s,,)}&quot;
def variavel = &apos;time_waiting_token_&apos;
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone(&apos;UTC-3&apos;)
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format(&quot;dd/MM/yyyy HH:mm:ss.SSS&quot;)
props.put(&quot;tempo_limite_formatado&quot;, formatado)
log.info(&apos;-------&gt;: Token &apos; + variavel + &apos; : Expira -&gt; epoch: &apos; + props.get(variavel) + &apos; Data: &apos; + formatado, tmz)</stringProp>
              <stringProp name="TestPlan.comments">armazena o token em uma variavel global</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Retry token" enabled="true">
            <stringProp name="TestPlan.comments">esse modulo vai fazendo retentativas no token quando ele da erro até dar sucesso</stringProp>
            <stringProp name="WhileController.condition">${__javaScript(&quot;${__P(status_code)}&quot; != &quot;200&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
              <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name"></stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
                <stringProp name="TestPlan.comments">Extrai o token</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(10) + 1;
String complete = &quot;&quot;;

if (count == 10) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__RandomString(22,ABDFHlkjggRTioo1234567890,)}</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">vars.put(&quot;random&quot;,Parameters);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">status_code</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">props.put(&apos;access_token&apos;, vars.get(&apos;access_token&apos;))
props.put(&apos;status_code&apos;, vars.get(&apos;status_code&apos;))

def tempo_limite = &quot;${__timeShift(,,PT260s,,)}&quot;
def variavel = &apos;time_waiting_token_&apos;
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone(&apos;UTC-3&apos;)
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format(&quot;dd/MM/yyyy HH:mm:ss.SSS&quot;)
props.put(&quot;tempo_limite_formatado&quot;, formatado)
log.info(&apos;-------&gt;: Token &apos; + variavel + &apos; : Expira -&gt; epoch: &apos; + props.get(variavel) + &apos; Data: &apos; + formatado, tmz)</stringProp>
                <stringProp name="TestPlan.comments">armazena o token em uma variavel global</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1. POST Criar Pedido" enabled="true"/>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.1 POST Criar Pedido" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(999) + 1;
String complete = &quot;&quot;;

if (count == 999) {
    vars.put(&quot;complete&quot;, &quot;não&quot;);
} else {
    vars.put(&quot;complete&quot;, &quot;sim&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="113879">sim</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.1 POST Criar Pedido" enabled="false">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">${__P(status_code)}</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">Esse cara esta setado para quando o token der erro ele cai no erro tambem</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(999) + 1;
String complete = &quot;&quot;;

if (count == 999) {
    vars.put(&quot;complete&quot;, &quot;não&quot;);
} else {
    vars.put(&quot;complete&quot;, &quot;sim&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="113879">sim</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2. POST Confirmar Pedido" enabled="false"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body &apos;não&apos;" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;não&quot; || &quot;${complete}&quot; == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.1 POST Confirmar Pedido" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${timestamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{
  &quot;id&quot;: ${ID},
&quot;Seu Pedido foi rejeitado, entre em contato com a Central de Atendimento
}
</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Temporizador Constante" enabled="true">
                <stringProp name="ConstantTimer.delay">30</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body &apos;sim&apos;" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;sim&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.1 POST Confirmar Pedido" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${timestamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Temporizador Constante" enabled="true">
                <stringProp name="ConstantTimer.delay">30</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="1. Cenario Pico" enabled="false">
          <collectionProp name="load_profile">
            <collectionProp name="1873354706">
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1722">60</stringProp>
            </collectionProp>
            <collectionProp name="-294433756">
              <stringProp name="1598">20</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="-259325884">
              <stringProp name="1691">50</stringProp>
              <stringProp name="1691">50</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="-296955420">
              <stringProp name="1572">15</stringProp>
              <stringProp name="1572">15</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="546599556">
              <stringProp name="48625">100</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="2. Cenario Breakpoint" enabled="false">
          <collectionProp name="load_profile">
            <collectionProp name="1873319315">
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-241987871">
              <stringProp name="1567">10</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-241023616">
              <stringProp name="1567">10</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-211131711">
              <stringProp name="1629">30</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-210034590">
              <stringProp name="1629">30</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-175988448">
              <stringProp name="1722">60</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="1722">60</stringProp>
            </collectionProp>
            <collectionProp name="-1910995922">
              <stringProp name="1722">60</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="3. Cenario Stress" enabled="false">
          <collectionProp name="load_profile">
            <collectionProp name="1875380691">
              <stringProp name="49">1</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="1608670305">
              <stringProp name="1722">60</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="48873">180</stringProp>
            </collectionProp>
            <collectionProp name="-1910995922">
              <stringProp name="1722">60</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Mudar RPS via CMD" enabled="true">
          <stringProp name="TestPlan.comments">fazer calculo RPS desejado(5) X 60 e preencher no hits, ex RPSdesejado 5x60= 300, sempre deixar no grupos de usuarios o numero de VUser suficientes ou sempre a mais para o RPS</stringProp>
          <intProp name="calcMode">3</intProp>
          <stringProp name="throughput">${__P(hits,300)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="15.Chamar token com retry" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="0. Token" enabled="true"/>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
            <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name"></stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
              <stringProp name="TestPlan.comments">Extrai o token</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(5) + 1;
String complete = &quot;&quot;;

if (count == 5) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__RandomString(22,ABDFHlkjggRTioo1234567890,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&quot;random&quot;,Parameters);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">status_code</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">props.put(&apos;access_token&apos;, vars.get(&apos;access_token&apos;))
props.put(&apos;status_code&apos;, vars.get(&apos;status_code&apos;))

def tempo_limite = &quot;${__timeShift(,,PT260s,,)}&quot;
def variavel = &apos;time_waiting_token_&apos;
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone(&apos;UTC-3&apos;)
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format(&quot;dd/MM/yyyy HH:mm:ss.SSS&quot;)
props.put(&quot;tempo_limite_formatado&quot;, formatado)
log.info(&apos;-------&gt;: Token &apos; + variavel + &apos; : Expira -&gt; epoch: &apos; + props.get(variavel) + &apos; Data: &apos; + formatado, tmz)</stringProp>
              <stringProp name="TestPlan.comments">armazena o token em uma variavel global</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Retry token" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(${status_code} != 200,)}</stringProp>
          </WhileController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
              <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name"></stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
                <stringProp name="TestPlan.comments">Extrai o token</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(2) + 1;
String complete = &quot;&quot;;

if (count == 2) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__RandomString(22,ABDFHlkjggRTioo1234567890,)}</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">vars.put(&quot;random&quot;,Parameters);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">status_code</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">props.put(&apos;access_token&apos;, vars.get(&apos;access_token&apos;))
props.put(&apos;status_code&apos;, vars.get(&apos;status_code&apos;))

def tempo_limite = &quot;${__timeShift(,,PT260s,,)}&quot;
def variavel = &apos;time_waiting_token_&apos;
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone(&apos;UTC-3&apos;)
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format(&quot;dd/MM/yyyy HH:mm:ss.SSS&quot;)
props.put(&quot;tempo_limite_formatado&quot;, formatado)
log.info(&apos;-------&gt;: Token &apos; + variavel + &apos; : Expira -&gt; epoch: &apos; + props.get(variavel) + &apos; Data: &apos; + formatado, tmz)</stringProp>
                <stringProp name="TestPlan.comments">armazena o token em uma variavel global</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Limpar cache" enabled="false">
            <stringProp name="TestPlan.comments">Este sampler é para limpar o cache da variavel especificada para a cada chamada para não passar valor antigo no modulo de rety</stringProp>
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;statusCode&apos;)) {
		vars.put(name, null)
	}
}
prev.setIgnore();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="1. POST Criar Pedido" enabled="true">
          <stringProp name="RunTime.seconds">2</stringProp>
        </RunTime>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.1 POST Criar Pedido" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(999) + 1;
String complete = &quot;&quot;;

if (count == 999) {
    vars.put(&quot;complete&quot;, &quot;não&quot;);
} else {
    vars.put(&quot;complete&quot;, &quot;sim&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="113879">sim</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2. POST Confirmar Pedido" enabled="false"/>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body &apos;não&apos;" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;não&quot; || &quot;${complete}&quot; == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.1 POST Confirmar Pedido" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${timestamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{
  &quot;id&quot;: ${ID},
&quot;Seu Pedido foi rejeitado, entre em contato com a Central de Atendimento
}
</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Temporizador Constante" enabled="true">
                <stringProp name="ConstantTimer.delay">30</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se conter campo no Body &apos;sim&apos;" enabled="true">
            <stringProp name="IfController.condition">${__groovy(&quot;${complete}&quot; == &quot;sim&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.1 POST Confirmar Pedido" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${timestamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Temporizador Constante" enabled="true">
                <stringProp name="ConstantTimer.delay">30</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="1. Cenario Pico" enabled="false">
          <collectionProp name="load_profile">
            <collectionProp name="1873354706">
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1722">60</stringProp>
            </collectionProp>
            <collectionProp name="-294433756">
              <stringProp name="1598">20</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="-259325884">
              <stringProp name="1691">50</stringProp>
              <stringProp name="1691">50</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="-296955420">
              <stringProp name="1572">15</stringProp>
              <stringProp name="1572">15</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="546599556">
              <stringProp name="48625">100</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="2. Cenario Breakpoint" enabled="false">
          <collectionProp name="load_profile">
            <collectionProp name="1873319315">
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-241987871">
              <stringProp name="1567">10</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-241023616">
              <stringProp name="1567">10</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-211131711">
              <stringProp name="1629">30</stringProp>
              <stringProp name="1629">30</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-210034590">
              <stringProp name="1629">30</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="-175988448">
              <stringProp name="1722">60</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="1722">60</stringProp>
            </collectionProp>
            <collectionProp name="-1910995922">
              <stringProp name="1722">60</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="3. Cenario Stress" enabled="false">
          <collectionProp name="load_profile">
            <collectionProp name="1875380691">
              <stringProp name="49">1</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="1629">30</stringProp>
            </collectionProp>
            <collectionProp name="1608670305">
              <stringProp name="1722">60</stringProp>
              <stringProp name="1722">60</stringProp>
              <stringProp name="48873">180</stringProp>
            </collectionProp>
            <collectionProp name="-1910995922">
              <stringProp name="1722">60</stringProp>
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Mudar RPS via CMD" enabled="true">
          <stringProp name="TestPlan.comments">fazer calculo RPS desejado(5) X 60 e preencher no hits, ex RPSdesejado 5x60= 300, sempre deixar no grupos de usuarios o numero de VUser suficientes ou sempre a mais para o RPS</stringProp>
          <intProp name="calcMode">3</intProp>
          <stringProp name="throughput">${__P(hits,300)}</stringProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="16.Chamar token 1x dentro do mesmo threadgroup (perfeito) com retry token" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="0. Token" enabled="true">
          <stringProp name="WhileController.condition">${__groovy(ctx.getThreadNum() == 0,)}</stringProp>
        </WhileController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(50,102,)}</stringProp>
            <stringProp name="LATENCY">${__Random(50,70,)}</stringProp>
            <stringProp name="CONNECT">${__Random(0,0,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name"></stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
              <stringProp name="TestPlan.comments">Extrai o token</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">status_code</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(10) + 1;
String complete = &quot;&quot;;

if (count == 10) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Retry token" enabled="true">
            <stringProp name="TestPlan.comments">esse modulo vai fazendo retentativas no token quando ele da erro até dar sucesso</stringProp>
            <stringProp name="WhileController.condition">${__groovy(&quot;${status_code}&quot; != &quot;200&quot;,)}</stringProp>
          </WhileController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,102,)}</stringProp>
              <stringProp name="LATENCY">${__Random(50,70,)}</stringProp>
              <stringProp name="CONNECT">${__Random(0,0,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name"></stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
                <stringProp name="TestPlan.comments">Extrai o token</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">status_code</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(10) + 1;
String complete = &quot;&quot;;

if (count == 10) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.2 Requisicao Fantasma" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">essa requisição serve para frear a chamada do token ate  ele expirar</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">240000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="oculta requisicao" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="TestPlan.comments">esse processor oculta da arvore de resultados esta requisicao</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="1. POST Criar Pedido" enabled="true">
          <stringProp name="WhileController.condition">${__groovy(ctx.getThreadNum() &gt; 0,)}</stringProp>
        </WhileController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="1.0 aguarda token por thread" enabled="true">
            <stringProp name="TestPlan.comments">esse controlador garante que a requisicao seja chamada somente depois que houver o token</stringProp>
          </OnceOnlyController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.0 Requisicao Fantasma" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">essa requisição serve para frear a requiscao para esperar o token ser chamado primeiro</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
              </ConstantTimer>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="oculta requisicao" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">prev.setIgnore();</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="TestPlan.comments">esse processor oculta da arvore de resultados esta requisicao</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.1 POST Criar Pedido" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(100,250,)}</stringProp>
            <stringProp name="LATENCY">${__Random(100,250,)}</stringProp>
            <stringProp name="CONNECT">${__Random(10,60,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="false">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="1. Cenario Pico" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1873354706">
                <stringProp name="49">1</stringProp>
                <stringProp name="1567">10</stringProp>
                <stringProp name="1722">60</stringProp>
              </collectionProp>
              <collectionProp name="-294433756">
                <stringProp name="1598">20</stringProp>
                <stringProp name="1598">20</stringProp>
                <stringProp name="60">60</stringProp>
              </collectionProp>
              <collectionProp name="-259325884">
                <stringProp name="1691">50</stringProp>
                <stringProp name="1691">50</stringProp>
                <stringProp name="60">60</stringProp>
              </collectionProp>
              <collectionProp name="-296955420">
                <stringProp name="1572">15</stringProp>
                <stringProp name="1572">15</stringProp>
                <stringProp name="60">60</stringProp>
              </collectionProp>
              <collectionProp name="546599556">
                <stringProp name="48625">100</stringProp>
                <stringProp name="48625">100</stringProp>
                <stringProp name="60">60</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="2. Cenario Breakpoint" enabled="true">
            <collectionProp name="load_profile">
              <collectionProp name="1873354706">
                <stringProp name="49">1</stringProp>
                <stringProp name="1567">10</stringProp>
                <stringProp name="1722">60</stringProp>
              </collectionProp>
              <collectionProp name="-241980076">
                <stringProp name="1567">10</stringProp>
                <stringProp name="1567">10</stringProp>
                <stringProp name="1691">50</stringProp>
              </collectionProp>
              <collectionProp name="-241023616">
                <stringProp name="1567">10</stringProp>
                <stringProp name="1629">30</stringProp>
                <stringProp name="1629">30</stringProp>
              </collectionProp>
              <collectionProp name="-211096320">
                <stringProp name="1629">30</stringProp>
                <stringProp name="1629">30</stringProp>
                <stringProp name="1722">60</stringProp>
              </collectionProp>
              <collectionProp name="-210034590">
                <stringProp name="1629">30</stringProp>
                <stringProp name="1722">60</stringProp>
                <stringProp name="1629">30</stringProp>
              </collectionProp>
              <collectionProp name="-175988448">
                <stringProp name="1722">60</stringProp>
                <stringProp name="1722">60</stringProp>
                <stringProp name="1722">60</stringProp>
              </collectionProp>
              <collectionProp name="-1910995922">
                <stringProp name="1722">60</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="1567">10</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="3. Cenario Stress" enabled="false">
            <collectionProp name="load_profile">
              <collectionProp name="1875380691">
                <stringProp name="49">1</stringProp>
                <stringProp name="1722">60</stringProp>
                <stringProp name="1629">30</stringProp>
              </collectionProp>
              <collectionProp name="1608670305">
                <stringProp name="1722">60</stringProp>
                <stringProp name="1722">60</stringProp>
                <stringProp name="48873">180</stringProp>
              </collectionProp>
              <collectionProp name="-1910995922">
                <stringProp name="1722">60</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="1567">10</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Mudar RPS via CMD" enabled="false">
            <stringProp name="TestPlan.comments">fazer calculo RPS desejado(5) X 60 e preencher no hits, ex RPSdesejado 5x60= 300, sempre deixar no grupos de usuarios o numero de VUser suficientes ou sempre a mais para o RPS</stringProp>
            <intProp name="calcMode">3</intProp>
            <stringProp name="throughput">${__P(hits,60)}</stringProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="17. Controlar RPS e threads dinamicamente gerenciados de acordo com o RPS com controle de peso por requisicao" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">${__tstFeedback(Cenario Pico,1,200,5)}</stringProp>
        <stringProp name="RampUp"></stringProp>
        <stringProp name="Steps"></stringProp>
        <stringProp name="Hold">300</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">S</stringProp>
        <stringProp name="TestPlan.comments">controlar remotamente via cmd o RPS</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="0. Token" enabled="true">
          <stringProp name="IfController.condition">${__groovy(props.get(&quot;time_waiting_token_&quot;), tempo_limite)}
${__groovy(log.info(&quot;---------&gt;: Token expira em: &quot; + props.get(&quot;tempo_limite_formatado&quot;)),)}
${__groovy(log.info(&quot;First User: &quot; + String.valueOf(ctx.getThreadNum() == 0)),)}
${__groovy(
	if(vars.get(&quot;tempo_limite&quot;) == &quot;&quot;){
		log.info(&quot;O token é nulo!!&quot;)
	} else {
		log.info(&quot;Já expirou: &quot; + String.valueOf(System.currentTimeMillis() &gt; Long.valueOf(vars.get(&quot;tempo_limite&quot;))))
	}
,)}
${__groovy(
	if(ctx.getThreadNum() == 0){
		if(vars.get(&quot;tempo_limite&quot;) == &quot;&quot;){
			true
		} else {
			System.currentTimeMillis() &gt; Long.valueOf(vars.get(&quot;tempo_limite&quot;))
		}
	} else {
		false
	}
,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <stringProp name="TestPlan.comments">Esse modulo separa o token para ser chamado somente do thread 0 e o resto dos treads só consomem a variavel salva por ele</stringProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
            <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name"></stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
              <stringProp name="TestPlan.comments">Extrai o token</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(10) + 1;
String complete = &quot;&quot;;

if (count == 10) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__RandomString(22,ABDFHlkjggRTioo1234567890,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&quot;random&quot;,Parameters);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">status_code</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">props.put(&apos;access_token&apos;, vars.get(&apos;access_token&apos;))
props.put(&apos;status_code&apos;, vars.get(&apos;status_code&apos;))

def tempo_limite = &quot;${__timeShift(,,PT260s,,)}&quot;
def variavel = &apos;time_waiting_token_&apos;
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone(&apos;UTC-3&apos;)
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format(&quot;dd/MM/yyyy HH:mm:ss.SSS&quot;)
props.put(&quot;tempo_limite_formatado&quot;, formatado)
log.info(&apos;-------&gt;: Token &apos; + variavel + &apos; : Expira -&gt; epoch: &apos; + props.get(variavel) + &apos; Data: &apos; + formatado, tmz)</stringProp>
              <stringProp name="TestPlan.comments">armazena o token em uma variavel global</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Retry token" enabled="true">
            <stringProp name="TestPlan.comments">esse modulo vai fazendo retentativas no token quando ele da erro até dar sucesso</stringProp>
            <stringProp name="WhileController.condition">${__javaScript(&quot;${__P(status_code)}&quot; != &quot;200&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
              <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name"></stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
                <stringProp name="TestPlan.comments">Extrai o token</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(10) + 1;
String complete = &quot;&quot;;

if (count == 10) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__RandomString(22,ABDFHlkjggRTioo1234567890,)}</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">vars.put(&quot;random&quot;,Parameters);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">status_code</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">props.put(&apos;access_token&apos;, vars.get(&apos;access_token&apos;))
props.put(&apos;status_code&apos;, vars.get(&apos;status_code&apos;))

def tempo_limite = &quot;${__timeShift(,,PT260s,,)}&quot;
def variavel = &apos;time_waiting_token_&apos;
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone(&apos;UTC-3&apos;)
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format(&quot;dd/MM/yyyy HH:mm:ss.SSS&quot;)
props.put(&quot;tempo_limite_formatado&quot;, formatado)
log.info(&apos;-------&gt;: Token &apos; + variavel + &apos; : Expira -&gt; epoch: &apos; + props.get(variavel) + &apos; Data: &apos; + formatado, tmz)</stringProp>
                <stringProp name="TestPlan.comments">armazena o token em uma variavel global</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <com.blazemeter.jmeter.control.WeightedSwitchController guiclass="com.blazemeter.jmeter.control.WeightedSwitchControllerGui" testclass="com.blazemeter.jmeter.control.WeightedSwitchController" testname="bzm - Weighted Switch Controller" enabled="true">
          <boolProp name="IsRandomChoice">false</boolProp>
          <collectionProp name="Weights">
            <collectionProp name="628678606">
              <stringProp name="54966445">01. Criar Pedido</stringProp>
              <stringProp name="1691">50</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <collectionProp name="514168999">
              <stringProp name="706352840">02. Confirmar Pedido</stringProp>
              <stringProp name="1691">50</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
          </collectionProp>
        </com.blazemeter.jmeter.control.WeightedSwitchController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="01. Criar Pedido" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(499) + 1;
String complete = &quot;&quot;;

if (count == 499) {
    vars.put(&quot;complete&quot;, &quot;não&quot;);
} else {
    vars.put(&quot;complete&quot;, &quot;sim&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="113879">sim</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="02. Confirmar Pedido" enabled="true">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;shipDate&quot;: &quot;${timestamp}&quot;,
  &quot;complete&quot;: ${complete}
}


[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Temporizador Constante" enabled="true">
              <stringProp name="ConstantTimer.delay">30</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="Cenario Pico" enabled="true">
          <collectionProp name="load_profile">
            <collectionProp name="1873354706">
              <stringProp name="49">1</stringProp>
              <stringProp name="1567">10</stringProp>
              <stringProp name="1722">60</stringProp>
            </collectionProp>
            <collectionProp name="-294433756">
              <stringProp name="1598">20</stringProp>
              <stringProp name="1598">20</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="-259325884">
              <stringProp name="1691">50</stringProp>
              <stringProp name="1691">50</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="-296955420">
              <stringProp name="1572">15</stringProp>
              <stringProp name="1572">15</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
            <collectionProp name="546599556">
              <stringProp name="48625">100</stringProp>
              <stringProp name="48625">100</stringProp>
              <stringProp name="60">60</stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.timers.VariableThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="18. Limpa CSV e gera massa com counter e envia arquivo e Salva CSV" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">150</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="0. Limpa CSV" enabled="true">
          <stringProp name="IfController.condition">${__groovy(if(ctx.getThreadNum() == 0)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="0. Limpa CSV" enabled="true">
            <stringProp name="TestPlan.comments">Esse modulo faz executar 1x</stringProp>
          </OnceOnlyController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="0.1 Limpa CSV" enabled="true">
              <stringProp name="TestPlan.comments">faz limpeza do csv e reinsere cabeçalho com campos no documento</stringProp>
              <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor daas variaveis qque serao inseridas no csv..
String ID = &quot;ID&quot;;
String scriptHome = FileServer.getFileServer().getBaseDir();

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream(scriptHome + &quot;\\ID.csv&quot;, false);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(ID);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;

///Os comandos abaixo são para eliminar dos logs o aparecimento dos samplers, so funciona para PRE e POS samplers
///SampleResult.setIgnore();
///prev.setIgnore();</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Esse Pos prossessor é para ocultar o sampler da arvore de resultados" enabled="true">
                <stringProp name="TestPlan.comments">ative ou desative conforme a necessidade</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">prev.setIgnore();</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
          <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
          <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
          <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
          <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name"></stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
            <stringProp name="TestPlan.comments">Extrai o token</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(10) + 1;
String complete = &quot;&quot;;

if (count == 10) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__RandomString(22,ABDFHlkjggRTioo1234567890,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">vars.put(&quot;random&quot;,Parameters);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">status_code</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">props.put(&apos;access_token&apos;, vars.get(&apos;access_token&apos;))
props.put(&apos;status_code&apos;, vars.get(&apos;status_code&apos;))

def tempo_limite = &quot;${__timeShift(,,PT260s,,)}&quot;
def variavel = &apos;time_waiting_token_&apos;
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone(&apos;UTC-3&apos;)
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format(&quot;dd/MM/yyyy HH:mm:ss.SSS&quot;)
props.put(&quot;tempo_limite_formatado&quot;, formatado)
log.info(&apos;-------&gt;: Token &apos; + variavel + &apos; : Expira -&gt; epoch: &apos; + props.get(variavel) + &apos; Data: &apos; + formatado, tmz)</stringProp>
            <stringProp name="TestPlan.comments">armazena o token em uma variavel global</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="1. POST A" enabled="true">
          <stringProp name="RunTime.seconds">280</stringProp>
        </RunTime>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.1 POST Criar Pedido" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99999,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = ID;
//tratativa se tiver algum campo null ou em branco nao salvar no csv
if(ID == null || ID.equals(&quot;&quot;)) {
	return jsonOutput;
}

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\ID.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(linha);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;</stringProp>
              <stringProp name="TestPlan.comments">esse processo é para salvar no csv apos cada chamada</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="113879">sim</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">complete</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.complete</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.IOException;

// Define the variables to be saved in the CSV file
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
// Tratativa: if the ID variable is null or empty, do not save it in the CSV file
if (ID == null || ID.isEmpty()) {
    return jsonOutput;
}

// Create the line to be written to the CSV file
String linha = ID;

// Open or create the CSV file
synchronized (this) {
    FileWriter fileWriter = null;
    BufferedWriter bufferedWriter = null;

    try {
        fileWriter = new FileWriter(scriptHome + &quot;\\ID.csv&quot;, true);
        bufferedWriter = new BufferedWriter(fileWriter);

        // Write the line to the file and append a newline character
        bufferedWriter.write(linha);
        bufferedWriter.newLine();
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        if (bufferedWriter != null) {
            try {
                bufferedWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (fileWriter != null) {
            try {
                fileWriter.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

// Return the jsonOutput variable to the next element in the test plan
return jsonOutput;
</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="1.3 Salva massa no CSV se tiver erro em branco ou null alguma variavel nao salva" enabled="true">
            <stringProp name="TestPlan.comments">faz limpeza do csv e reinsere cabeçalho com campos no documento</stringProp>
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = ID;
//tratativa se tiver algum campo null ou em branco nao salvar no csv
if(ID == null || ID.equals(&quot;&quot;)) {
	return jsonOutput;
}

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\ID.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(linha);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Esse Pos prossessor é para ocultar o sampler da arvore de resultados" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="1.3 Salva massa no CSV se tiver erro em branco ou null alguma variavel nao salva" enabled="false">
            <stringProp name="TestPlan.comments">faz limpeza do csv e reinsere cabeçalho com campos no documento</stringProp>
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;

// Define the variables to be saved in the CSV file
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
// Tratativa: if the ID variable is null or empty, do not save it in the CSV file
if (ID == null || ID.equals(&quot;&quot;)) {
    return jsonOutput;
}

// Create the line to be written to the CSV file
String linha = ID;

// Open or create the CSV file
synchronized (this) {
    FileWriter fileWriter = new FileWriter(scriptHome + &quot;\\ID.csv&quot;, true);

    // Write the line to the file and append a newline character
    fileWriter.write(linha);
    fileWriter.write(System.getProperty(&quot;line.separator&quot;));

    // Close the file
    fileWriter.close();
}

// Return the jsonOutput variable to the next element in the test plan
return jsonOutput;
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Esse Pos prossessor é para ocultar o sampler da arvore de resultados" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">prev.setIgnore();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="jp@gc - Throughput Shaping Timer" enabled="true">
            <collectionProp name="load_profile">
              <collectionProp name="1571431052">
                <stringProp name="1598">20</stringProp>
                <stringProp name="1598">20</stringProp>
                <stringProp name="50547">300</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="19. Cenario varias request para completar 1 jornada (Transação) TPS com requisicao simples" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">120</stringProp>
        <stringProp name="ThreadGroup.ramp_time"></stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">150</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="0. Token" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token JB1" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(1,1,)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,1,)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,1,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
            <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.2 Token CCT" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(1,1,)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,1,)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,1,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
            <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.3 Token AL8" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(1,1,)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,1,)}</stringProp>
            <stringProp name="CONNECT">${__Random(1,1,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
            <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RunTime guiclass="RunTimeGui" testclass="RunTime" testname="Runtime Controller" enabled="true">
          <stringProp name="RunTime.seconds">280</stringProp>
        </RunTime>
        <hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="1. Pagamento simples" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">5</stringProp>
          </LoopController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.1 POST Pagamento simples" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(1,1,)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,1,)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,1,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="2. POST Pagamento boleto" enabled="true">
            <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
          </CriticalSectionController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.1 POST Gera boleto" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(1,1,)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,1,)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,1,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.2 POST Converte Boleto" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(1,1,)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,1,)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,1,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2.3 POST Paga boleto" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(1,1,)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,1,)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,1,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <kg.apc.jmeter.timers.VariableThroughputTimer guiclass="kg.apc.jmeter.timers.VariableThroughputTimerGui" testclass="kg.apc.jmeter.timers.VariableThroughputTimer" testname="1. Cenario Pico" enabled="true">
            <collectionProp name="load_profile">
              <collectionProp name="1874283570">
                <stringProp name="49">1</stringProp>
                <stringProp name="1629">30</stringProp>
                <stringProp name="1629">30</stringProp>
              </collectionProp>
              <collectionProp name="-211089302">
                <stringProp name="1629">30</stringProp>
                <stringProp name="1629">30</stringProp>
                <stringProp name="1784">80</stringProp>
              </collectionProp>
              <collectionProp name="-1945006673">
                <stringProp name="1629">30</stringProp>
                <stringProp name="49">1</stringProp>
                <stringProp name="1567">10</stringProp>
              </collectionProp>
            </collectionProp>
          </kg.apc.jmeter.timers.VariableThroughputTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="20. Cenario varias request para completar 1 jornada (Transação) TPS" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">50</stringProp>
        <stringProp name="ThreadGroup.ramp_time">50</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
          <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
          <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
          <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
          <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
          <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name"></stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
            <stringProp name="TestPlan.comments">Extrai o token</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(10) + 1;
String complete = &quot;&quot;;

if (count == 10) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters">${__RandomString(22,ABDFHlkjggRTioo1234567890,)}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">vars.put(&quot;random&quot;,Parameters);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">code</stringProp>
            <stringProp name="RegexExtractor.refname">status_code</stringProp>
            <stringProp name="RegexExtractor.regex">(.*)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">props.put(&apos;access_token&apos;, vars.get(&apos;access_token&apos;))
props.put(&apos;status_code&apos;, vars.get(&apos;status_code&apos;))

def tempo_limite = &quot;${__timeShift(,,PT260s,,)}&quot;
def variavel = &apos;time_waiting_token_&apos;
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone(&apos;UTC-3&apos;)
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format(&quot;dd/MM/yyyy HH:mm:ss.SSS&quot;)
props.put(&quot;tempo_limite_formatado&quot;, formatado)
log.info(&apos;-------&gt;: Token &apos; + variavel + &apos; : Expira -&gt; epoch: &apos; + props.get(variavel) + &apos; Data: &apos; + formatado, tmz)</stringProp>
            <stringProp name="TestPlan.comments">armazena o token em uma variavel global</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Transaction Controller" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.1 POST Criar Pedido 1" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,1024,)}</stringProp>
            <stringProp name="CONNECT">${__Random(100,250,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99999,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status 200 Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validar Status Complete Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="113879">sim</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.2 POST Criar Pedido 2" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(1000,2000,)}</stringProp>
            <stringProp name="LATENCY">${__Random(1000,2000,)}</stringProp>
            <stringProp name="CONNECT">${__Random(0,0,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99999,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = ID;
//tratativa se tiver algum campo null ou em branco nao salvar no csv
if(ID == null || ID.equals(&quot;&quot;)) {
	return jsonOutput;
}

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\ID.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(linha);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="1.3 POST Criar Pedido 3" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__Random(1,10,number)}</stringProp>
          </LoopController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.3 POST Criar Pedido 3" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(200,700,)}</stringProp>
              <stringProp name="LATENCY">${__Random(200,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__Random(1,99999,)}</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">petId</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">3000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1.4 POST Criar Pedido 4" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${__P(access_token)}
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(1000,2000,)}</stringProp>
            <stringProp name="LATENCY">${__Random(1000,2000,)}</stringProp>
            <stringProp name="CONNECT">${__Random(0,0,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            <stringProp name="TestPlan.comments">cenario positivo</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor ID" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__Random(1,99999,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">String[] params = Parameters
vars.put(&quot;ID&quot;, Parameters);
vars.get(&quot;ID&quot;)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="gerador de PetID" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">petId</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
// define as variaveis e o valor das variaveis que serao inseridas no csv no caso vo vars.get busca as variaveis armasenadas na memoria..
String ID = vars.get(&quot;ID&quot;);

String scriptHome = FileServer.getFileServer().getBaseDir();
//transforma todas as variaveis em uma linha para inserir no cabecalho do csv
String linha = ID;
//tratativa se tiver algum campo null ou em branco nao salvar no csv
if(ID == null || ID.equals(&quot;&quot;)) {
	return jsonOutput;
}

// abre ou cria o arquivo csv.. true para ir inserindo os dados nas linhhas.. false para limpar o arquivo
f = new FileOutputStream (scriptHome + &quot;\\ID.csv&quot;, true);
p = new PrintStream(f);
// insere o valor das variaveis no arquivo
p.println(linha);
// Fecha o arquivo
p.close();f.close();
// este verifica o codigo
return jsonOutput;</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="21. Cenario varias request para completar 1 jornada com Retry por counter e status (Transação) TPS" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <stringProp name="TestPlan.comments">Este cenario tem tratativa de retry com count e estouro de retry com proteção de erro de transação,&quot; nunca usar cenário com transaction controller  no modo stard next thread loop&quot; sempre usar no  &quot;continue&quot;</stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="0. Token" enabled="true">
          <stringProp name="IfController.condition">${__groovy(props.get(&quot;time_waiting_token_&quot;), tempo_limite)}
${__groovy(
	if(ctx.getThreadNum() == 0){
		if(vars.get(&quot;tempo_limite&quot;) == &quot;&quot;){
			true
		} else {
			System.currentTimeMillis() &gt; Long.valueOf(vars.get(&quot;tempo_limite&quot;))
		}
	} else {
		false
	}
,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <stringProp name="TestPlan.comments">Esse modulo separa o token para ser chamado somente do thread 0 e o resto dos treads só consomem a variavel salva por ele</stringProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
            <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
            <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
            <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
            <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
            <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name"></stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
              <stringProp name="TestPlan.comments">Extrai o token</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(10) + 1;
String complete = &quot;&quot;;

if (count == 10) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">${__RandomString(22,ABDFHlkjggRTioo1234567890,)}</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&quot;random&quot;,Parameters);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">code</stringProp>
              <stringProp name="RegexExtractor.refname">status_code</stringProp>
              <stringProp name="RegexExtractor.regex">(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">props.put(&apos;access_token&apos;, vars.get(&apos;access_token&apos;))
props.put(&apos;status_code&apos;, vars.get(&apos;status_code&apos;))

def tempo_limite = &quot;${__timeShift(,,PT260s,,)}&quot;
def variavel = &apos;time_waiting_token_&apos;
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone(&apos;UTC-3&apos;)
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format(&quot;dd/MM/yyyy HH:mm:ss.SSS&quot;)
props.put(&quot;tempo_limite_formatado&quot;, formatado)
</stringProp>
              <stringProp name="TestPlan.comments">armazena o token em uma variavel global</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Retry token" enabled="true">
            <stringProp name="TestPlan.comments">esse modulo vai fazendo retentativas no token quando ele da erro até dar sucesso</stringProp>
            <stringProp name="WhileController.condition">${__javaScript(&quot;${__P(status_code)}&quot; != &quot;200&quot;)}</stringProp>
          </WhileController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="0.1 Token" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${transaction_status}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://auth-exemplo.org/auth

POST data:
grant_type=client_credentials&amp;client_id=12fg544t-dg66-3445-76574567
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;access_token&quot; : &quot;ey${random}JhbGciOiAiSFMyNTYiLCAidHlwIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYyMzkwMjJ9Cg&quot;,
&quot;token_type&quot; : &quot; Bearer&quot; ,
&quot;expires_in&quot; : 300,
&quot;refresh_token&quot; : &quot;RGhr43fd${random}wIjogIkpXVCJ9CgeyJzdWIiOiAiMTIzNDU2Nzg5MCIsICJuYW1lIjogIkpvaG4gRG9lIiwgImlhdCI6IDE1MTYy&quot;,
&quot;scope&quot; : &quot;teste-mock-jmeter&quot;,
&quot;active&quot; : true
}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,700,)}</stringProp>
              <stringProp name="CONNECT">${__Random(400,600,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
              <stringProp name="TestPlan.comments">status false pra validar modulos de IF</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name"></stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">access_token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">nulo</stringProp>
                <stringProp name="TestPlan.comments">Extrai o token</stringProp>
                <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(10) + 1;
String complete = &quot;&quot;;

if (count == 10) {
    vars.put(&quot;transaction_status&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;transaction_status&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters">${__RandomString(22,ABDFHlkjggRTioo1234567890,)}</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">vars.put(&quot;random&quot;,Parameters);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">status_code</stringProp>
                <stringProp name="RegexExtractor.regex">(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">props.put(&apos;access_token&apos;, vars.get(&apos;access_token&apos;))
props.put(&apos;status_code&apos;, vars.get(&apos;status_code&apos;))

def tempo_limite = &quot;${__timeShift(,,PT260s,,)}&quot;
def variavel = &apos;time_waiting_token_&apos;
props.put(variavel, tempo_limite)

def tmz = TimeZone.getTimeZone(&apos;UTC-3&apos;)
def now = new Date(Long.parseLong(tempo_limite))
def formatado = now.format(&quot;dd/MM/yyyy HH:mm:ss.SSS&quot;)
props.put(&quot;tempo_limite_formatado&quot;, formatado)
</stringProp>
                <stringProp name="TestPlan.comments">armazena o token em uma variavel global</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1. Transaction Criar Pedidos" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1. POST Criar Pedido 1" enabled="true"/>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="1. POST Criar Pedido 1" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${statusCode}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
}

${access_token}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(500,1024,)}</stringProp>
              <stringProp name="LATENCY">${__Random(500,1024,)}</stringProp>
              <stringProp name="CONNECT">${__Random(100,250,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.protocol.http.sampler.HTTPSampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor status" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(30) + 1;
String complete = &quot;&quot;;

if (count == 30) {
    vars.put(&quot;statusCode&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;statusCode&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Status ERROR!</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">300</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se ERRO go next thread loop" enabled="true">
              <stringProp name="IfController.condition">${__groovy(${statusCode} != 200,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="TestPlan.comments">Este sampler é para limpar o cache da variavel especificada para a cada chamada para não passar valor antigo no modulo de rety</stringProp>
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;statusCode&apos;)) {
		vars.put(name, null)
	}
}
prev.setIgnore();</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2. POST Criar Pedido 2" enabled="true"/>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="2. POST Criar Pedido 2" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${statusCode}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
}

${access_token}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(1000,2000,)}</stringProp>
              <stringProp name="LATENCY">${__Random(1000,2000,)}</stringProp>
              <stringProp name="CONNECT">${__Random(0,0,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Headers" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${__P(Token)}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor status" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(30) + 1;
String complete = &quot;&quot;;

if (count == 30) {
    vars.put(&quot;statusCode&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;statusCode&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Status ERROR!</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se ERRO go next thread loop" enabled="true">
              <stringProp name="IfController.condition">${__groovy(${statusCode} != 200,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="TestPlan.comments">Este sampler é para limpar o cache da variavel especificada para a cada chamada para não passar valor antigo no modulo de rety</stringProp>
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;statusCode&apos;)) {
		vars.put(name, null)
	}
}
prev.setIgnore();</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="3. POST Criar Pedido 3" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(&quot;${complete3}&quot;.equals(&quot;Erro&quot;) &amp;&amp; (${retryCounter_3} &lt; 10),)}</stringProp>
          </WhileController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="3. POST Criar Pedido 3" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${statusCode}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete3}
}

${retryCounter_3}
${access_token}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,200,)}</stringProp>
              <stringProp name="LATENCY">${__Random(100,200,)}</stringProp>
              <stringProp name="CONNECT">${__Random(0,0,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(5) + 1;
String complete3 = &quot;&quot;;

if (count == 5) {
    vars.put(&quot;complete3&quot;,&quot;Success&quot;);
} else {
    vars.put(&quot;complete3&quot;,&quot;Erro&quot;);
}
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor status" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(300) + 1;
String complete = &quot;&quot;;

if (count == 30) {
    vars.put(&quot;statusCode&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;statusCode&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Estouro de erro por Retry" enabled="true">
                <stringProp name="BeanShellAssertion.query">if (vars.get(&quot;retryCounter_3&quot;).equals(&quot;10&quot;)) {
    Failure = true;
    FailureMessage = &quot;Erro! Numero maximo de Retry !&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Status ERROR!</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Retry counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">10</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">retryCounter_3</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extractor STATUS CODE" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">status</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se ERRO go next thread loop" enabled="true">
              <stringProp name="IfController.condition">${__groovy(${retryCounter_3} == 10 || ${status} != 200,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="TestPlan.comments">Este sampler é para limpar o cache da variavel especificada para a cada chamada para não passar valor antigo no modulo de rety</stringProp>
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;status&apos;)) {
		vars.put(name, null)
	}
}
prev.setIgnore();</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="4. POST Criar Pedido 4" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(&quot;${complete4}&quot;.equals(&quot;Erro&quot;) &amp;&amp; (${retryCounter_4} &lt; 10),)}</stringProp>
            <stringProp name="TestPlan.comments">para cenario diferente colocar EX ${__groovy(!&quot;${complete4}&quot;.equals(&quot;Erro&quot;) &amp;&amp; (${retryCounter_4} &lt; 10),)}</stringProp>
          </WhileController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="4. POST Criar Pedido 4" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${statusCode}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete4}
}

${retryCounter_4}
${access_token}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(1000,2000,)}</stringProp>
              <stringProp name="LATENCY">${__Random(1000,2000,)}</stringProp>
              <stringProp name="CONNECT">${__Random(0,0,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor complete" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(8) + 1;
String complete4 = &quot;&quot;;

if (count == 8) {
    vars.put(&quot;complete4&quot;, &quot;Success&quot;);
} else {
    vars.put(&quot;complete4&quot;, &quot;Erro&quot;);
}</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor status" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(100) + 1;
String complete = &quot;&quot;;

if (count == 30) {
    vars.put(&quot;statusCode&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;statusCode&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extractor STATUS CODE" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">code</stringProp>
                <stringProp name="RegexExtractor.refname">status</stringProp>
                <stringProp name="RegexExtractor.regex">(\d+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Status ERROR!</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Estouro de erro por Retry" enabled="true">
                <stringProp name="BeanShellAssertion.query">if (vars.get(&quot;retryCounter_4&quot;).equals(&quot;10&quot;)) {
    Failure = true;
    FailureMessage = &quot;Erro! Numero maximo de Retry !&quot;;
}
</stringProp>
                <stringProp name="BeanShellAssertion.filename"></stringProp>
                <stringProp name="BeanShellAssertion.parameters"></stringProp>
                <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
              </BeanShellAssertion>
              <hashTree/>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Retry counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">10</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">retryCounter_4</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se ERRO go next thread loop" enabled="true">
              <stringProp name="IfController.condition">${__groovy(${retryCounter_4} == 10 || ${status} != 200,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler 4" enabled="true">
                <stringProp name="TestPlan.comments">Este sampler é para limpar o cache da variavel especificada para a cada chamada para não passar valor antigo no modulo de rety</stringProp>
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;status&apos;)) {
		vars.put(name, null)
	}
}
prev.setIgnore();</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="5. POST Criar Pedido 5" enabled="true"/>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="5. POST Criar Pedido 5" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${statusCode}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">POST https://petstore.swagger.io/v2/store/order

POST data:
{
  &quot;id&quot;: ${ID},
  &quot;petId&quot;: ${petId},
  &quot;quantity&quot;: ${__Random(1,5,Qt)},
  &quot;shipDate&quot;: &quot;${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SSS,timestamp)}Z&quot;,
  &quot;status&quot;: &quot;placed&quot;,
  &quot;complete&quot;: ${complete}
}

${(access_token}
[no cookies]</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;id&quot;:${ID},&quot;petId&quot;:${petId},&quot;quantity&quot;:${Qt},&quot;shipDate&quot;:&quot;${timestamp}&quot;,&quot;status&quot;:&quot;placed&quot;,&quot;complete&quot;:${complete}}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(1000,2000,)}</stringProp>
              <stringProp name="LATENCY">${__Random(1000,2000,)}</stringProp>
              <stringProp name="CONNECT">${__Random(0,0,)}</stringProp>
              <stringProp name="URL">POST https://petstore.swagger.io/v2/store/order</stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
              <stringProp name="TestPlan.comments">cenario positivo</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="PreProcessor status" enabled="true">
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">import java.util.Random;

int count = new Random().nextInt(30) + 1;
String complete = &quot;&quot;;

if (count == 30) {
    vars.put(&quot;statusCode&quot;, &quot;404&quot;);
} else {
    vars.put(&quot;statusCode&quot;, &quot;200&quot;);
}

vars.put(&quot;count&quot;, String.valueOf(count));
</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Validacao de Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message">Status ERROR!</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Se ERRO go next thread loop" enabled="true">
              <stringProp name="IfController.condition">${__groovy(${statusCode} != 200,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="TestPlan.comments">Este sampler é para limpar o cache da variavel especificada para a cada chamada para não passar valor antigo no modulo de rety</stringProp>
                <stringProp name="BeanShellSampler.query"></stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;statusCode&apos;)) {
		vars.put(name, null)
	}
}
prev.setIgnore();</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Flow Control Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Limpar cache" enabled="true">
            <stringProp name="TestPlan.comments">Este sampler é para limpar o cache da variavel especificada para a cada chamada para não passar valor antigo no modulo de rety</stringProp>
            <stringProp name="BeanShellSampler.query"></stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;complete4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_3&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;retryCounter_4&apos;)) {
		vars.put(name, null)
	}
}
vars.getIterator().each {
	def name = it.getKey()
	if (name.startsWith(&apos;statusCode&apos;)) {
		vars.put(name, null)
	}
}
prev.setIgnore();</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Resultados" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Resultados SUCESSO" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Resultados ERRO" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="profileName" elementType="Argument">
              <stringProp name="Argument.name">profileName</stringProp>
              <stringProp name="Argument.value">TEST</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="runId" elementType="Argument">
              <stringProp name="Argument.name">runId</stringProp>
              <stringProp name="Argument.value">R001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chUrl" elementType="Argument">
              <stringProp name="Argument.name">chUrl</stringProp>
              <stringProp name="Argument.value">localhost:8123</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chUser" elementType="Argument">
              <stringProp name="Argument.name">chUser</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chPassword" elementType="Argument">
              <stringProp name="Argument.name">chPassword</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chDatabase" elementType="Argument">
              <stringProp name="Argument.name">chDatabase</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersList" elementType="Argument">
              <stringProp name="Argument.name">samplersList</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="useRegexForSamplerList" elementType="Argument">
              <stringProp name="Argument.name">useRegexForSamplerList</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="recordSubSamples" elementType="Argument">
              <stringProp name="Argument.name">recordSubSamples</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="groupBy" elementType="Argument">
              <stringProp name="Argument.name">groupBy</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="groupByCountOrBatchSize" elementType="Argument">
              <stringProp name="Argument.name">groupByCountOrBatchSize</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="recordAdditionalDataLevel" elementType="Argument">
              <stringProp name="Argument.name">recordAdditionalDataLevel</stringProp>
              <stringProp name="Argument.value">info</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="nodeName" elementType="Argument">
              <stringProp name="Argument.name">nodeName</stringProp>
              <stringProp name="Argument.value">Test-Node</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBBucket" elementType="Argument">
              <stringProp name="Argument.name">influxDBBucket</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBPort" elementType="Argument">
              <stringProp name="Argument.name">influxDBPort</stringProp>
              <stringProp name="Argument.value">8086</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBToken" elementType="Argument">
              <stringProp name="Argument.name">influxDBToken</stringProp>
              <stringProp name="Argument.value">5up3r-S3cr3t-auth-t0k3n</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBThresholdError" elementType="Argument">
              <stringProp name="Argument.name">influxDBThresholdError</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBHttpScheme" elementType="Argument">
              <stringProp name="Argument.name">influxDBHttpScheme</stringProp>
              <stringProp name="Argument.value">http</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="responseBodyLength" elementType="Argument">
              <stringProp name="Argument.name">responseBodyLength</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testName" elementType="Argument">
              <stringProp name="Argument.name">testName</stringProp>
              <stringProp name="Argument.value">Test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBFlushInterval" elementType="Argument">
              <stringProp name="Argument.name">influxDBFlushInterval</stringProp>
              <stringProp name="Argument.value">4000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="saveResponseBodyOfFailures" elementType="Argument">
              <stringProp name="Argument.name">saveResponseBodyOfFailures</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBMaxBatchSize" elementType="Argument">
              <stringProp name="Argument.name">influxDBMaxBatchSize</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBHost" elementType="Argument">
              <stringProp name="Argument.name">influxDBHost</stringProp>
              <stringProp name="Argument.value">localhost</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBURL" elementType="Argument">
              <stringProp name="Argument.name">influxDBURL</stringProp>
              <stringProp name="Argument.value">http://localhost:8086/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxDBOrganization" elementType="Argument">
              <stringProp name="Argument.name">influxDBOrganization</stringProp>
              <stringProp name="Argument.value">home</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">cloud.testload.jmeter.ClickHouseBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="DashBoard RPS" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">2000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}/Resultados/Report${__time(yyyy-MM-dd-HHmm,)}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}/Resultados/Report${__time(yyyy-MM-dd-HHmm,)}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
